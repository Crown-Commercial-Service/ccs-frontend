{% extends 'base.html.twig' %}

{% block title %}News - CCS{% endblock %}

{% block header %}
    {% embed '/includes/header.html.twig' %}
        {% block bannerarea %}
        {% endblock %}
    {% endembed %}
{% endblock %}

{% block body %}

    <div class="govuk-width-container">

        <div class="govuk-phase-banner">
            <p class="govuk-phase-banner__content">
                <strong class="govuk-tag govuk-phase-banner__content__tag ">
                    beta 
                </strong> 
                <span class="govuk-phase-banner__text">This is a new service â€“ your
                <a class="govuk-link" href={{ survey_link }}>feedback</a> will help us to improve it.
                </span>
            </p>
        </div>

        {% set filterSet = title is defined and title is not empty ? true : false %}

        <div class="govuk-breadcrumbs">
            <ol class="govuk-breadcrumbs__list">
                <li class="govuk-breadcrumbs__list-item">
                    <a class="govuk-breadcrumbs__link" href="/">Home</a>
                </li>
                {% if filterSet %}
                    <li class="govuk-breadcrumbs__list-item">
                        <a class="govuk-breadcrumbs__link" href="/news"> News</a>
                    </li>

                    <li class="govuk-breadcrumbs__list-item" aria-current="page">
                        {{ title }}
                    </li>
                {% else %}
                    <li class="govuk-breadcrumbs__list-item" aria-current="page">
                        News
                    </li>
                {% endif %}
            </ol>
        </div>

        <main id="main-content" role="main"  class="govuk-main-wrapper">


            <div class="govuk-grid-row">
                <div class="govuk-grid-column-full">
                    <h1 class="govuk-heading-xl page-title">{{ filterSet ? title : "News"}}</h1>
                </div>
            </div>

            {% if pages.pagination.totalResults > 0  %}
                <div class ="news_div" v-if="feature">
                    {% include 'news/feature.html.twig' with {'page': pages.current} %}
                </div>
            {% endif %}

            
            <div class="govuk-grid-row" >
                <div class="govuk-grid-column-one-quarter">
                    <h2 class="news-listing-title" style="margin: 25px 0 35px 0">View archives</h3>

                        <div class="govuk-accordion ccs-accordion ccs-accordion--clean" data-module="govuk-accordion" id="accordion-with-summary-sections">
                            <div class="govuk-accordion__section ccs-accordion__section--clean govuk-form-group govuk-form-group--enclosure ccs-form-group--enclosure--tight govuk-accordion__section--expanded">
                                <div class="govuk-accordion__section-header">
                                    <h2 class="govuk-accordion__section-heading">
                                        <span class="govuk-accordion__section-button ccs-accordion__section-button" id="accordion-for-categories">
                                            Type of article
                                        </span>
                                    </h2>
                                </div>
                               
                                <div id="audience-tag-accordion-content-1" class="govuk-accordion__section-content" aria-labelledby="accordion-for-categories">
                                    <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                        <input v-on:change=fetchAPIData(null,null) v-model="checkedCategories" value="allCategories" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="allCategories" type="checkbox">
                                        <label class="govuk-label govuk-checkboxes__label" for="allCategories">
                                            All articles
                                        </label>
                                    </div>
                                    {% if categoriesFilters is not empty %}
                                        {% for item in categoriesFilters|sort %}
                                            <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                <input v-on:change=fetchAPIData("{{item.slug}}",null) v-model="checkedCategories" value="{{item.id}}" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.slug}}" type="checkbox">
                                                <label class="govuk-label govuk-checkboxes__label" for="{{item.slug}}">
                                                    {{ item.name }}
                                                </label>
                                            </div>
                                        {% endfor %}
                                    {% endif %}
                                </div>

                                
                            </div>
                        </div>

                        <div class="govuk-accordion ccs-accordion ccs-accordion--clean" data-module="govuk-accordion" id="accordion-with-summary-sections">
                            <div class="govuk-accordion__section ccs-accordion__section--clean govuk-form-group govuk-form-group--enclosure ccs-form-group--enclosure--tight govuk-accordion__section--expanded">
                                <div class="govuk-accordion__section-header">
                                    <h2 class="govuk-accordion__section-heading">
                                        <span class="govuk-accordion__section-button ccs-accordion__section-button" id="accordion-for-sectors">
                                            Sectors
                                        </span>
                                    </h2>
                                </div>
                               
                                <div id="audience-tag-accordion-content-1" class="govuk-accordion__section-content" aria-labelledby="accordion-for-sectors">
                                    <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                        <input v-on:change=fetchAPIData(null,null) v-model="checkedSectors" value="allSectors" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="allSectors" type="checkbox">
                                        <label class="govuk-label govuk-checkboxes__label" for="allSectors">
                                            All Sectors
                                        </label>
                                    </div>
                                    {% if sectorsFilters is not empty %}
                                        {% for item in sectorsFilters %}
                                            <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                <input v-on:change=fetchAPIData("{{item.slug}}",null) v-model="checkedSectors" value="{{item.id}}" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.slug}}" type="checkbox">
                                                <label class="govuk-label govuk-checkboxes__label" for="{{item.slug}}">
                                                    {{ item.name }}
                                                </label>
                                            </div>
                                        {% endfor %}
                                    {% endif %}
                                </div>

                                
                            </div>
                        </div>

                        <div class="govuk-accordion ccs-accordion ccs-accordion--clean" data-module="govuk-accordion" id="accordion-with-summary-sections">
                            <div class="govuk-accordion__section ccs-accordion__section--clean govuk-form-group govuk-form-group--enclosure ccs-form-group--enclosure--tight govuk-accordion__section--expanded">
                                <div class="govuk-accordion__section-header">
                                    <h2 class="govuk-accordion__section-heading">
                                        <span class="govuk-accordion__section-button ccs-accordion__section-button" id="accordion-for-ps">
                                            Products and services
                                        </span>
                                    </h2>
                                </div>
                               
                                <div id="audience-tag-accordion-content-1" class="govuk-accordion__section-content" aria-labelledby="accordion-for-ps">
                                    <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                        <input v-on:change=fetchAPIData(null,null) v-model="checkedProducts_services" value="allPS" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="allPS" type="checkbox">
                                        <label class="govuk-label govuk-checkboxes__label" for="allPS">
                                            All Categories
                                        </label>
                                    </div>
                                    {% if productsServicesFilters is not empty %}
                                        {% for item in productsServicesFilters %}
                                            <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                <input v-on:change=fetchAPIData("{{item.slug}}",null) v-model="checkedProducts_services" value="{{item.id}}" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.slug}}" type="checkbox">
                                                <label class="govuk-label govuk-checkboxes__label" for="{{item.slug}}">
                                                    {{ item.name }}
                                                </label>
                                            </div>
                                        {% endfor %}
                                    {% endif %}
                                </div>

                                
                            </div>
                        </div>
                </div>
                <div class="govuk-grid-column-three-quarters news-list-pagination-container">

                    <div v-if="responseAvailable">
                            <div v-for="result in results">
                                <div class ="news_div" v-if="result.index != 0 && feature || !feature">
                                    <div class="govuk-width-container">
                                        <div class="govuk-grid-row news_wrapper ">

                                            <div v-if="result.imageSet" class="govuk-grid-column-one-half news-listing-block">
                                                <p class="news-listing-meta"> 
                                                    <a :href="result.CategoriesLink">{[ result.postType ]}</a>
                                                    <span> {[result.postedDate]} </span> 
                                                </p>
                                                <h2 class="news-listing-title">
                                                    <a :href="result.postLink" v-html="result.title.rendered"></a>
                                                </h2>
                                                <p class="govuk-body govuk-!-font-size-17featured">{[result.acf.post_lead_text]}</p> 
                                            </div>
                                            <div v-else class="govuk-grid-column-full news-listing-block">
                                                <p class="news-listing-meta"> 
                                                    <a :href="result.CategoriesLink">{[ result.postType ]}</a>
                                                    <span> {[result.postedDate]} </span> 
                                                </p>
                                                
                                                <h2 class="news-listing-title">
                                                    <a :href="result.postLink" v-html="result.title.rendered"></a>
                                                </h2>
                                                <p class="govuk-body govuk-!-font-size-17featured">{[result.acf.post_lead_text]}</p> 
                                            </div>
                                            
                                            <div class="govuk-grid-column-one-half news-img-container">
                                                <figure class="image-wrapper news_img">
                                                    <picture class="">
                                                        <div v-if="result.imageSet">
                                                            <img :src="result.imageURL"
                                                                 :alt="result.altText"
                                                                    role="presentation"
                                                                    class=""
                                                                    loading="lazy"/>
                                                        </div>
                                                    </picture>

                                                </figure>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>

                            <results-pagination 
                                :total-results="totalResults" 
                                :number-of-pages="numberOfPages" 
                                :current-page="currentPage" 
                                v-on:update-page="updatePageValue($event)" 
                            ></results-pagination>


                    </div>
                    <div v-else-if="responseAvailable === false">
                        <p>Loading...</p>
                    </div>
            </div>

        </main>
        <!-- Vue and Custom JavaScript -->
        <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    
        <script>
             /**
            * Function to test if the browser supports ES6 template literals
            */
            function supportsLiterals() {
                try{
                    return eval("''===``");
                }
                catch(e){
                    return false;
                }
            }

            if(!('Promise' in window) || !supportsLiterals() || !window.fetch) {
                throw new Error("Your browser doesn't support the necessary JavaScript functions to use the enhanced search and has been served a non-JavaScript version");
            }

            var apiBaseUrl                  = '{{ api_base_url }}';
            var appBaseUrl                  = '{{ app_base_url }}';
            var pageNumber                  = {% if pageNumber is not empty %}{{ pageNumber }}{% else %}1{% endif %};
            var checkedCategories           = [];
            var checkedSectors              = [];
            var checkedProducts_services    = [];

            {% if filters.categories is defined and filters.categories is not empty %}
                var checkedCategories   = Array.from([{{filters.categories}}]);
            {% endif %}

            {% if filters.sectors is defined and filters.sectors is not empty %}
                var checkedSectors   = Array.from([{{filters.sectors}}]);
            {% endif %}

            {% if filters.products_services is defined and filters.products_services is not empty %}
                var checkedProducts_services   = Array.from([{{filters.products_services}}]);
            {% endif %}

            

            Vue.component('results-pagination', {
                delimiters: ['{[', ']}'],
                props: {
                    currentPage: Number,
                    totalResults: Number,
                    numberOfPages: Number,
                },
                computed: {
                    nextPage: function() {
                        if(this.currentPage == this.numberOfPages) {
                            return this.currentPage;
                        }
                        return this.currentPage + 1;
                    },
                    previousPage: function() {
                        if(this.currentPage == 1) {
                            return this.currentPage;
                        }
                        return this.currentPage - 1;
                    },
                    paginationStartNumber: function() {
                        // start page defaults to 2 (second page) because the
                        // first page link is always output by default
                        var linksStartPage = 1;

                        // if the start page is at the beginning of the pagination
                        // then account for this
                        if ((this.currentPage - 2) < 2 ) {
                            linksStartPage = 2;
                        } else {
                            // otherwise the start page is equal to the current
                            // page minus 2, this means that the pagination should
                            // have a couple of links either side of the current
                            // page, e.g.   2 3 [4] 5 6
                            linksStartPage = this.currentPage - 2;
                        }

                        // if the start page is very close to the last page, then
                        // account for this
                        if((this.currentPage + 2) >= this.numberOfPages) {
                            linksStartPage = linksStartPage - 2;
                        }

                        if(this.numberOfPages < this.resultPagesLinkNumber) {
                            linksStartPage = 1;
                        }

                        if(linksStartPage <= 0) {
                            linksStartPage = 1;
                        }

                        return linksStartPage;
                    },
                    paginationEndNumber: function() {
                        var linksEndPage   = this.paginationStartNumber + 4;

                        // if there aren't more pages than the number we
                        // want to show by minimum, then the end page is just equal
                        // to the final result page
                        if (this.numberOfPages < this.resultPagesLinkNumber) {
                            linksEndPage = this.totalResults;
                        }

                        if ((linksEndPage >= this.numberOfPages)) {
                            // minus 1 because the last page is always output
                            linksEndPage = this.numberOfPages - 1;
                        }

                        if(this.numberOfPages == 1) {
                            linksEndPage = 1;
                        }

                        return linksEndPage;
                    }
                },
                methods: {
                    updatePageNumber: function(event, newPage) {
                        event.preventDefault();
                        this.$emit('update-page', newPage);
                        search.fetchAPIData(null, newPage)
                    },
                    range : function (start, end) {
                        return Array(end - start + 1).fill().map(function(_, idx) {
                            return start + idx;
                        });
                    }
                },
                template: 
                    `
                    <div>
                        <ul class="list--inline pagination govuk-body" role="navigation" aria-label="Pagination" v-if="numberOfPages > 0">
                            <li class="pagination__item pagination__item--previous" v-if="currentPage != 1">
                                <a href="#" rel="previous" v-on:click="updatePageNumber($event, previousPage)">
                                    <span class="icon">
                                        <svg width="17" height="14" xmlns="http://www.w3.org/2000/svg"><path d="M6.7 0l1.4 1.4-4.3 4.3h13v2H3.9l4.2 4-1.4 1.4L0 6.7z" fill="#007194" fill-rule="evenodd"></path></svg>
                                    </span>
                                    <span>Previous</span> <span class="visuallyhidden">page</span>
                                </a>
                            </li>

                            <li class="pagination__item" v-if="numberOfPages > 6">
                                <span v-if="currentPage == 1"><span class="visuallyhidden">Page </span>1</span>
                                <a v-else href="#" v-on:click="updatePageNumber($event, 1)"><span class="visuallyhidden">Page </span>1</a>
                            </li>

                            <li class="pagination__item" v-if="paginationStartNumber > 2">â€¦</li>

                            <li class="pagination__item" v-for="page in range(paginationStartNumber, paginationEndNumber)" v-if="numberOfPages > 1">
                                <span v-if="page == currentPage"><span class="visuallyhidden">Page </span>{[ page ]}</span>
                                <a v-else href="#" v-on:click="updatePageNumber($event, page)"><span class="visuallyhidden">Page </span>{[ page ]}</a>
                            </li>

                            <li class="pagination__item" v-if="(paginationEndNumber + 1) < numberOfPages">â€¦</li>

                            <li class="pagination__item" v-if="numberOfPages > 1">
                                <span v-if="currentPage == numberOfPages"><span class="visuallyhidden">Page </span>{[ numberOfPages ]}</span>
                                <a v-else href="#" v-on:click="updatePageNumber($event, numberOfPages)"><span class="visuallyhidden">Page </span>{[ numberOfPages ]}</a>
                            </li>

                            <li class="pagination__item pagination__item--next" v-if="currentPage != numberOfPages">
                                <a rel="next" v-on:click="updatePageNumber($event, nextPage)">
                                    <span>Next</span> <span class="visuallyhidden">page</span>
                                    <span class="icon">
                                        <svg width="17" height="14" xmlns="http://www.w3.org/2000/svg"><path d="M10.1 0L8.7 1.4 13 5.7H0v2h12.9l-4.2 4 1.4 1.4 6.7-6.4z" fill="#007194" fill-rule="evenodd"></path></svg>
                                    </span>
                                </a>
                            </li>
                        </ul>
                    </div>
                    `
            });


            var search = new Vue({
                delimiters: ['{[', ']}'],
                el: '#main-content',
                mounted:function(){
                    this.categoriesFilter();
                    this.sectorsFilter();
                    this.productsServicesFilter();
                },
                data: {
                    results: "",
                    responseAvailable: null,
                    feature: true,
                    apiURL:  apiBaseUrl + "wp/v2/posts?per_page=5",
                    checkedCategories: checkedCategories,
                    checkedSectors: checkedSectors,
                    checkedProducts_services: checkedProducts_services,

                    currentPage: pageNumber,
                    numberOfPages: Number,
                    totalResults: Number,

                    popstateLoad: false
                },
                created: function() {
                    // unfortunately we have to update the results when we instantiate
                    // the Vue app so it hooks in all the correct event handlers etc.
                    this.fetchAPIData(null,null);

                    // setup popstate event listener for History API
                    this.setupHistoryApi();                   
                },
                watch: {
                    searchRequestUrl: function() {
                        // if the searchRequestUrl hasn't been updated by a popstate
                        // event (back/forward button) then we push a state item to the
                        // JS History API
                        if(this.popstateLoad === false) {
                            history.pushState({
                                checkedCategories: this.checkedCategories,
                                checkedSectors: this.checkedSectors,
                                checkedProducts_services: this.checkedProducts_services,
                            }, 'News', this.frontendSearchUrl);
                        }

                        // reset the popstateLoad property to false
                        this.popstateLoad = false;
                    }
                },
                computed: {
                    frontendQueryUrl: function() {
                        var queryUrl = '/?';

                        if(this.checkedCategories.length != 0) {
                            queryUrl += '&categories=' + this.checkedCategories.join();
                        }

                        if(this.checkedSectors.length != 0) {
                            queryUrl += '&sectors=' + this.checkedSectors.join();
                        }

                        if(this.checkedProducts_services.length != 0) {
                            queryUrl += '&products_services=' + this.checkedProducts_services.join();
                        }

                        if(this.currentPage ){
                            queryUrl += '&page=' + this.currentPage;
                        }

                        return queryUrl != '/?' ? queryUrl : "";
                        
                    },
                    frontendSearchUrl: function() {
                        var searchUrl = '/news' + this.frontendQueryUrl ;
                        return searchUrl;
                    }
                },   
                methods: {
                    nth:function(number){
                        if (number > 3 && number < 21) return 'th';
                        switch (number % 10) {
                            case 1:  return "st";
                            case 2:  return "nd";
                            case 3:  return "rd";
                            default: return "th";
                        }
                    },
                    formatDate:function(date){
                        var self = this;
                        date = new Date(Date.parse(date));
                        const month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][date.getMonth()];
                        return date.getDate() + self.nth(date.getDate()) + ' ' + month + ' ' + date.getFullYear();

                    },
                    categoriesFilter:function(categoriesSlug){
                        var self = this;
                        var categoriesFilter = "";

                        if (self.checkedCategories.includes("allCategories") || self.checkedCategories.length == 0 || self.checkedCategories.length == "{{categoriesFilters|length}}"){
                            self.checkedCategories = [];
                            document.getElementById("allCategories").checked = true;
                            document.getElementById(categoriesSlug) != null ? document.getElementById(categoriesSlug).checked = false : null
                        }else{
                            document.getElementById("allCategories").checked = false;
                            categoriesFilter = "&categories=" + self.checkedCategories.join();
                        }

                        return categoriesFilter;
                    },
                    sectorsFilter:function(sectorSlug){
                        var self = this;
                        var sectorsFilter = "";
                        
                        if (self.checkedSectors.includes("allSectors") || self.checkedSectors.length == 0 || self.checkedSectors.length == "{{sectorsFilters|length}}"){
                            self.checkedSectors = [];
                            document.getElementById("allSectors").checked = true;
                            document.getElementById(sectorSlug) != null ? document.getElementById(sectorSlug).checked = false : null
                        }else{
                            document.getElementById("allSectors").checked = false;
                            sectorsFilter = "&sectors=" + self.checkedSectors.join()
                        }

                        return sectorsFilter;
                    },
                    productsServicesFilter:function(psSlug){
                        var self = this;
                        var products_servicesFilter = "";

                        if (self.checkedProducts_services.includes("allPS") || self.checkedProducts_services.length == 0 || self.checkedProducts_services.length == "{{productsServicesFilters|length}}"){
                            self.checkedProducts_services = [];
                            document.getElementById("allPS").checked = true;
                            document.getElementById(psSlug) != null ? document.getElementById(psSlug).checked = false : null
                        }else{
                            document.getElementById("allPS").checked = false;
                            products_servicesFilter = "&products_services=" + self.checkedProducts_services.join()
                        }

                        return products_servicesFilter;
                    },
                    searchRequestUrl: function(categoriesSlug, page) {
                        fetchURL = this.apiURL + this.categoriesFilter() + this.sectorsFilter() + this.productsServicesFilter();

                        if (categoriesSlug != null && page == null){
                            this.currentPage = 1
                        }else if(categoriesSlug == null && page != null){
                            this.currentPage = page
                        }
                        
                        fetchURL = fetchURL + "&page=" + this.currentPage;

                        if(this.popstateLoad === false) {
                            history.pushState({
                                checkedCategories: this.checkedCategories,
                                checkedSectors: this.checkedSectors,
                                checkedProducts_services: this.checkedProducts_services,
                            }, 'Search suppliers - CCS', this.frontendSearchUrl);
                        }

                        // reset the popstateLoad property to false
                        this.popstateLoad = false;

                        return fetchURL;
                    },
                    fetchAPIData: function(categoriesSlug, page) {
                        var self = this;
                        this.feature = false;
                        this.responseAvailable = false;

                        var requestUrl = this.searchRequestUrl(categoriesSlug, page);

                        fetch(requestUrl)
                        .then(async function(response) {
                            if (!response.ok) {
                                throw new Error('HTTP error, status = ' + response.status);
                            }
                            
                            self.numberOfPages = await parseInt(response.headers.get("X-WP-TotalPages"));
                            self.totalResults = await parseInt(response.headers.get("X-WP-Total"));

                            return response.json();
                        })
                        .then(function(jsonResponse) {
                            for(var i = 0; i < jsonResponse.length; i++) {                                
                                jsonResponse[i].postedDate = self.formatDate(jsonResponse[i].date);
                                jsonResponse[i].postType = jsonResponse[i].category_type;
                                jsonResponse[i].CategoriesLink = appBaseUrl +"/news?categories=" + jsonResponse[i].categories[0];
                                jsonResponse[i].postLink = appBaseUrl+ "/news/" + jsonResponse[i].slug;
                                jsonResponse[i].index = i;

                                if (jsonResponse[i].featured_image_url != false) {
                                    jsonResponse[i].imageSet = true;
                                    jsonResponse[i].imageURL = jsonResponse[i].featured_image_url;
                                    jsonResponse[i].altText  = jsonResponse[i].alt_text;
                                }else{
                                    jsonResponse[i].imageSet = false;
                                }
                            }
                            self.results = jsonResponse;
                            self.responseAvailable = true;
                            self.checkFeature();
                        })
                        .catch(function(error) {
                            console.log('An error occurred');
                            console.log(error);
                            this.responseAvailable = false;
                        });
                    },
                    updatePageValue: function(newPageValue) {
                        this.currentPage = newPageValue;
                    },
                    checkFeature: function() {
                        this.feature = false;

                        if(this.checkedCategories.length == 0 && this.checkedSectors.length == 0 && this.checkedProducts_services.length == 0 && this.currentPage == 1){
                            this.feature = true;
                        }
                    },
                    setupHistoryApi: function() {
                        var self = this;
                        window.onpopstate = function(event) {
                            // set the popstate variable to true so that we can
                            // tell in other parts of the code that the state change
                            // is being caused by the back/forward button
                            self.popstateLoad = true;

                            if(event.state == null) {
                                self.checkedCategories = [];
                                self.checkedSectors = [];
                                self.checkedProducts_services =[]
                                return;
                            }

                            self.checkedCategories         = event.state.checkedCategories;
                            self.checkedSectors            = event.state.checkedSectors;
                            self.checkedProducts_services  = event.checkedProducts_services.checkedLot;
                        }
                    },
                }
            });

        </script> 
    </div>

{% endblock %}