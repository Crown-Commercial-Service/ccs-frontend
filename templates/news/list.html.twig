{% extends 'base.html.twig' %}

{% block title %}News - CCS{% endblock %}

{% block header %}
    {% embed '/includes/header.html.twig' %}
        {% block bannerarea %}
        {% endblock %}
    {% endembed %}
{% endblock %}

{% block body %}
    {% include '_components/hero.html.twig' with {'image': '/assets/images/CCS-news_600.jpg', 'heading': 'Explore our latest news', 'notFromWordpress': 'true', 'H1title': 'true', 'content': '', 'cta_label': 'Subscribe to customer newsletter', 'cta_destination': '/newsletter', 'news_page_banner': 'true', 'newsletter': false} %}

    <div class="govuk-width-container">

        <div class="govuk-phase-banner">
            <p class="govuk-phase-banner__content">
                <strong class="govuk-tag govuk-phase-banner__content__tag ">
                    beta 
                </strong> 
                <span class="govuk-phase-banner__text">This is a new service - your
                <a class="govuk-link" href={{ survey_link }}>feedback</a> will help us to improve it.
                </span>
            </p>
        </div>

        {% set categoriesForTwig = filters.categories is defined and filters.categories is not empty ? filters.categories|split(',') : [] %}
        {% set downloadableForTwig = filters.digitalDownload is defined and filters.digitalDownload is not empty ? filters.digitalDownload|split(',') : [] %}

        {% set sectorsForTwig = filters.sectors is defined and filters.sectors is not empty ? filters.sectors|split(',') : [] %}
        {% set products_servicesForTwig = filters.products_services is defined and filters.products_services is not empty ? filters.products_services|split(',') : [] %}
        
        {% set allDownloadable = [] %}

        <div class="govuk-breadcrumbs">
            <ol class="govuk-breadcrumbs__list">
                <li class="govuk-breadcrumbs__list-item"><a class="govuk-breadcrumbs__link" href="/">Home</a></li>
                <li class="govuk-breadcrumbs__list-item" aria-current="page">News</li>
            </ol>
        </div>

        <main id="main-content" role="main"  class="govuk-main-wrapper">

            <div class="govuk-grid-row" >
                <div class="govuk-grid-column-one-quarter">

                    <div class="govuk-grid-row">
                    <form action="{{ path('news_list') }}" method="GET" id="form1">
                        <div class="govuk-grid-column-one-half">
                            <h2 class="govuk-heading-m">Apply filters</h2>
                        </div>
                            <div class="govuk-grid-column-one-half" style="text-align:right;">
                                <a v-show="!javascriptVersion" href={{ path('news_list') }} class="govuk-link"> Clear filters </a>
                                <a @click="resetAll()" href="#" class="govuk-link hideWithoutJS govuk-visually-hidden"> Clear filters </a>
                            </div>
                        </div>

                        <button class="govuk-button" data-module="govuk-button" v-show="!javascriptVersion">
                            Filter
                        </button>

                        <fieldset class="govuk-fieldset" aria-describedby="filter_article">
                            <div class="govuk-accordion ccs-accordion ccs-accordion--clean" data-module="govuk-accordion" id="filter_article">
                                <div class="govuk-accordion__section ccs-accordion__section--clean govuk-form-group govuk-form-group--enclosure ccs-form-group--enclosure--tight govuk-accordion__section">
                                    <div class="govuk-accordion__section-header">
                                        <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                                            <h2 class="govuk-accordion__section-heading">
                                                <span class="no-top-line govuk-accordion__section-button ccs-accordion__section-button" id="accordion-for-categories">
                                                    Type of article
                                                </span>
                                            </h2>
                                        </legend>
                                    </div>
                                
                                    <div id="filter_article-content-1" role="region" class="govuk-accordion__section-content" aria-labelledby="accordion-for-categories">
                                        <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                            <input v-model="allCategoriesModel" name="allCategories" value="allCategories" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="allCategories" type="checkbox" {{ filters.categories is not defined ? 'checked' }}>
                                            <label class="govuk-label govuk-checkboxes__label" for="allCategories">
                                                View all
                                            </label>
                                        </div>

                                        {% if categoriesFilters is not empty %}
                                            {% for item in categoriesFilters|sort %}
                                                <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                    <input v-model="checkedCategories" :value="{{ item.id }}" name="categories[]" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.slug}}" type="checkbox" {{ item.id in categoriesForTwig ? 'checked' }}>
                                                    <label class="govuk-label govuk-checkboxes__label" for="{{item.slug}}">
                                                        {{ item.name }}
                                                    </label>
                                                </div>
                                            {% endfor %}
                                        {% endif %}
                                        <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                            <input v-model="whitepaper" name="whitepaper" value=1 class="govuk-checkboxes__input govuk-checkboxes__input--small" id="whitepaper" type="checkbox" {{ filters.whitepaper is defined and filters.whitepaper is not null  ? 'checked' }}>
                                            <label class="govuk-label govuk-checkboxes__label" for="whitepaper">
                                                Whitepaper
                                            </label>
                                        </div>
                                        <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                            <input v-model="webinar" name="webinar" value=1 class="govuk-checkboxes__input govuk-checkboxes__input--small" id="webinar" type="checkbox" {{ filters.webinar is defined and filters.webinar is not null  ? 'checked' }}>
                                            <label class="govuk-label govuk-checkboxes__label" for="webinar">
                                                Webinar
                                            </label>
                                        </div>

                                        {% if contentTypeFilters is not empty %}
                                            {% for item in contentTypeFilters|sort %}

                                                {% set allDownloadable = allDownloadable|merge([item.id]) %}

                                                <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                    <input v-model="checkedDownloadable" :value="{{ item.id }}" name="digitalDownload[]" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.slug}}" type="checkbox" {{ item.id in downloadableForTwig ? 'checked' }}>
                                                    <label class="govuk-label govuk-checkboxes__label" for="{{item.slug}}">
                                                        {{ item.name }}
                                                    </label>
                                                </div>
                                            {% endfor %}
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                        </fieldset>

                        <fieldset class="govuk-fieldset" aria-describedby="filter_sector">
                            <div class="govuk-accordion ccs-accordion ccs-accordion--clean" data-module="govuk-accordion" id="filter_sector">
                                <div class="govuk-accordion__section ccs-accordion__section--clean govuk-form-group govuk-form-group--enclosure ccs-form-group--enclosure--tight govuk-accordion__section">
                                    <div class="govuk-accordion__section-header">
                                        <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                                            <h2 class="govuk-accordion__section-heading">
                                                <span class="no-top-line govuk-accordion__section-button ccs-accordion__section-button" id="accordion-for-sectors">
                                                    Sectors
                                                </span>
                                            </h2>
                                        </legend>
                                    </div>
                                
                                    <div id="filter_sector-content-1" role="region" class="govuk-accordion__section-content" aria-labelledby="accordion-for-sectors">
                                        <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                            <input v-model="allSectorsModel" name="allSectors" value="allSectors" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="allSectors" type="checkbox" {{ filters.sectors is not defined or filters.sectors is null ? 'checked' }}>
                                            <label class="govuk-label govuk-checkboxes__label" for="allSectors">
                                                View all
                                            </label>
                                        </div>
                                        {% if sectorsFilters is not empty %}
                                            {% for item in sectorsFilters %}
                                                <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                    <input v-model="checkedSectors" :value="{{ item.id }}" name="sectors[]" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.slug}}" type="checkbox" {{ item.id in sectorsForTwig ? 'checked' }}>
                                                    <label class="govuk-label govuk-checkboxes__label" for="{{item.slug}}">
                                                        {{ item.name }}
                                                    </label>
                                                </div>
                                            {% endfor %}
                                        {% endif %}
                                    </div>

                                    
                                </div>
                            </div>
                        </fieldset>

                        <fieldset class="govuk-fieldset" aria-describedby="filter_p_and_s">
                            <div class="govuk-accordion ccs-accordion ccs-accordion--clean" data-module="govuk-accordion" id="filter_p_and_s">
                                <div class="govuk-accordion__section ccs-accordion__section--clean govuk-form-group govuk-form-group--enclosure ccs-form-group--enclosure--tight govuk-accordion__section">
                                    <div class="govuk-accordion__section-header">
                                        <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                                            <h2 class="govuk-accordion__section-heading">
                                                <span class="no-top-line govuk-accordion__section-button ccs-accordion__section-button" id="accordion-for-ps">
                                                    Products and services
                                                </span>
                                            </h2>
                                        </legend>
                                    </div>
                                
                                    <div id="filter_p_and_s-content-1" role="region" class="govuk-accordion__section-content" aria-labelledby="accordion-for-ps">
                                        <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                            <input v-model="allPSModel" name="allPS" value="allPS" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="allPS" type="checkbox" {{ filters.products_services is not defined or filters.products_services is null ? 'checked' }}>
                                            <label class="govuk-label govuk-checkboxes__label" for="allPS">
                                                View all
                                            </label>
                                        </div>
                                        {% if productsServicesFilters is not empty %}
                                            {% for item in productsServicesFilters %}
                                                <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                    <input v-model="checkedProductsServices" :value="{{ item.id }}" name="PandS[]" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.slug}}" type="checkbox" {{ item.id in products_servicesForTwig ? 'checked' }}>
                                                    <label class="govuk-label govuk-checkboxes__label" for="{{item.slug}}">
                                                        {{ item.name }}
                                                    </label>
                                                </div>
                                            {% endfor %}
                                        {% endif %}
                                    </div>

                                    
                                </div>
                            </div>
                        </fieldset>

                        <button class="govuk-button" data-module="govuk-button" v-show="!javascriptVersion">
                            Filter
                        </button>
                    </form>
                </div>
                <div class="govuk-grid-column-three-quarters news-list-pagination-container">

                    <div v-if="responseAvailable" class="hideWithoutJS govuk-visually-hidden">
                            <div v-show="javascriptVersion" v-for="result in results">
                                <div class ="news_div" >
                                    <div class="govuk-width-container">
                                        <div class="govuk-grid-row news_wrapper">

                                            <div class="news-listing-block" :class="{'govuk-grid-column-one-half': result.imageSet, 'govuk-grid-column-full':!result.imageSet}">
                                                <p class="news-listing-meta"> 
                                                    <a :href="result.CategoriesLink">{[ result.postType ]}</a>
                                                    <span> {[result.modifiedDate]} </span> 
                                                </p>
                                                <h2 class="news-listing-title">
                                                    <a :href="result.postLink" v-html="result.title.rendered"></a>
                                                </h2>
                                                <p v-html="result.postDescription"></p> 
                                            </div>
                                            
                                            <div class="govuk-grid-column-one-half news-img-container">
                                                <figure class="image-wrapper news_img">
                                                    <picture class="">
                                                        <div v-if="result.imageSet">
                                                            <img :src="result.imageURL"
                                                                 :alt="result.altText"
                                                                    role="presentation"
                                                                    class=""
                                                                    loading="lazy"/>
                                                        </div>
                                                    </picture>

                                                </figure>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>

                            <results-pagination 
                                :total-results="totalResults" 
                                :number-of-pages="numberOfPages" 
                                :current-page="currentPage" 
                                v-on:update-page="updatePageValue($event)" 
                            ></results-pagination>


                    </div>
                    <div v-else-if="responseAvailable === false" class="hideWithoutJS govuk-visually-hidden">
                        <p>Loading results ...</p>
                    </div>
                    <div v-if="emptyResult" class="hideWithoutJS govuk-visually-hidden">
                        <p>There are no matching results.</p>
                    </div>

                    <div v-show="!javascriptVersion">
                        {% include '/news/_resultCards.html.twig' %}
                    </div>
                </div>

        <script>pushToDataLayer({'event': 'page_view', 'page_referrer': window.location.href, 'page_type': 'news'});</script>
        </main>

        <!-- Vue and Custom JavaScript -->
        {% if app.environment == "prod" %}
            <script src="/assets/scripts/libraries/vue.min.js?v=1"></script>
        {% else %}
            <script src="/assets/scripts/libraries/vue.js?v=1"></script>
        {% endif %}

        <script>
             /**
            * Function to test if the browser supports ES6 template literals
            */
            function supportsLiterals() {
                try{
                    return eval("''===``");
                }
                catch(e){
                    return false;
                }
            }

            if(!('Promise' in window) || !supportsLiterals() || !window.fetch) {
                throw new Error("Your browser doesn't support the necessary JavaScript functions to use the enhanced search and has been served a non-JavaScript version");
            }

            var apiBaseUrl                  = '{{ api_base_url }}';
            var appBaseUrl                  = '{{ app_base_url }}';
            var pageNumber                  = {% if pageNumber is defined and pageNumber is not empty %}{{ pageNumber }}{% else %}1{% endif %};
            var checkedCategories           = [];
            var checkedSectors              = [];
            var checkedProductsServices     = [];
            var whitepaper                  = false;
            var webinar                     = false;
            var checkedDownloadable         = [];

            {% if filters.categories is defined and filters.categories is not empty %}
                checkedCategories   = Array.from([{{filters.categories}}]);
            {% endif %}

            {% if filters.whitepaper is defined and filters.whitepaper == "1" %}
                whitepaper = true;
            {% endif %}

            {% if filters.webinar is defined and filters.webinar == "1" %}
                webinar = true;
            {% endif %}

            {% if filters.digitalDownload is defined and filters.digitalDownload is not empty %}
                checkedDownloadable = Array.from([{{filters.digitalDownload}}]);
            {% endif %} 



            {% if filters.sectors is defined and filters.sectors is not empty %}
                checkedSectors   = Array.from([{{filters.sectors}}]);
            {% endif %}

            {% if filters.products_services is defined and filters.products_services is not empty %}
                checkedProductsServices   = Array.from([{{filters.products_services}}]);
            {% endif %}

            const app = Vue.createApp({
                delimiters: ['{[', ']}'],
                
                data() {
                    return {
                        javascriptVersion: true,
                        results: null,
                        responseAvailable: false,
                        emptyResult: false,
                        apiURL: apiBaseUrl + "news?",
                        checkedCategories: checkedCategories,
                        whitepaper: whitepaper,
                        webinar: webinar,
                        checkedDownloadable: checkedDownloadable,
                        checkedSectors: checkedSectors,
                        checkedProductsServices: checkedProductsServices,
                        currentPage: pageNumber,
                        numberOfPages: Number,
                        totalResults: Number,
                        popstateLoad: false,
                    }
                },
                mounted() {
                    this.fetchAPIData(this.currentPage);
                    this.setupHistoryApi();     
                },
                created(){
                    // making sure the sections that is hidden at start shows
                    this.$nextTick(() => {
                        const hideWithOutJS = document.querySelectorAll('.hideWithoutJS');
                        hideWithOutJS.forEach(section => {
                            if (section.classList.contains('govuk-visually-hidden')) {;
                                section.classList.remove('govuk-visually-hidden');
                            }
                        });
                    });
                },
                watch: {
                    // making sure that the sections is refreshed 
                    responseAvailable(responseAvailable) {
                        this.$nextTick(() => {
                            const hideWithOutJS = document.querySelectorAll('.hideWithoutJS');
                            hideWithOutJS.forEach(section => {
                                if (section.classList.contains('govuk-visually-hidden')) {;
                                    section.classList.remove('govuk-visually-hidden');
                                }
                            });
                        });
                    },
                    checkedCategories: function(checkedCategories) {
                        this.handleCategoriesReset()
                        this.fetchAPIData(null)
                    },
                    whitepaper: function(whitepaper) {
                        this.handleCategoriesReset()
                        this.fetchAPIData(null)
                    },
                    webinar: function(webinar) {
                        this.handleCategoriesReset()
                        this.fetchAPIData(null)
                    },
                    checkedDownloadable: function(checkedDownloadable) {
                        this.handleCategoriesReset()
                        this.fetchAPIData(null)
                    },
                    checkedProductsServices: function(checkedProductsServices) {
                        if (checkedProductsServices.length === Number("{{productsServicesFilters|length}}")) {
                            this.checkedProductsServices = [];
                        }
                        this.fetchAPIData(null)
                    },
                    checkedSectors: function(checkedSectors) {
                        if (checkedSectors.length === Number("{{sectorsFilters|length}}")) {
                            this.checkedSectors = [];
                        }
                        this.fetchAPIData(null)
                    },
                },
                computed: {
                    frontendSearchUrl: function() {
                        var queryUrl = '/news/?'
                            + ((this.checkedCategories || []).length !== 0 ? '&categories=' + this.checkedCategories.join() : '')
                            + (this.whitepaper && !this.allCategoriesModel ? '&whitepaper=1' : '')
                            + (this.webinar && !this.allCategoriesModel ? '&webinar=1' : '')
                            + ((this.checkedDownloadable || []).length !== 0 ? '&digitalDownload=' + this.checkedDownloadable.join() : '')
                            + ((this.checkedProductsServices || []).length !== 0    ? '&products_services=' + this.checkedProductsServices.join() : '')
                            + ((this.checkedSectors || []).length !== 0             ? '&sectors=' + this.checkedSectors.join() : '')
                            + (this.currentPage ? '&page=' + this.currentPage : '')
                            + this.utmTagsRemain();

                        return queryUrl == '/news/?' ? '' : queryUrl;
                    },
                    allCategoriesModel: {
                        get() {
                            var status = (this.checkedCategories || []).length === 0 &&
                                this.whitepaper == false &&
                                this.webinar == false &&
                                (this.checkedDownloadable || []).length === 0

                            return status;
                        },
                        set(checked) {
                            if (checked) {
                                this.checkedCategories = [];
                                this.whitepaper = false;
                                this.webinar = false;
                                this.checkedDownloadable = [];
                            } else {
                                document.getElementById("allCategories").checked = true
                            }
                        }
                    },
                    allPSModel: {
                        get() {
                            return (this.checkedProductsServices || []).length === 0;
                        },
                        set(checked) {
                            if (checked) {
                                this.checkedProductsServices = [];
                            } else {
                                document.getElementById("allPS").checked = true
                            }
                        }
                    },
                    allSectorsModel: {
                        get() {
                            return (this.checkedSectors || []).length === 0;
                        },
                        set(checked) {
                            if (checked) {
                                this.checkedSectors = [];
                            } else {
                                document.getElementById("allSectors").checked = true
                            }
                        }
                    },
                },
                methods: {
                    handleCategoriesReset() {
                        if (
                            this.checkedCategories.length === Number("{{categoriesFilters|length}}") &&
                            this.whitepaper === true &&
                            this.webinar === true &&
                            this.checkedDownloadable.length === Number("{{contentTypeFilters|length}}")
                        ) {
                            this.checkedCategories = [];
                            this.whitepaper = false;
                            this.webinar = false;
                            this.checkedDownloadable = [];
                        }
                    },
                    resetAll:function(){
                        this.checkedCategories = [];
                        this.whitepaper = false;
                        this.webinar = false;
                        this.checkedDownloadable = [];
                        this.checkedProductsServices = [];
                        this.checkedSectors = [];
                        this.currentPage = 1;
                    },
                    formatDate:function(dateString){
                        date = new Date(Date.parse(dateString));
                        const month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][date.getMonth()];
                        return date.getDate() + ' ' + month + ' ' + date.getFullYear();
                    },
                    utmTagsRemain:function(){
                        urlParams = new URLSearchParams(window.location.href);
                        utmParams = '';

                        for (var param of urlParams) {
                            [key, value] = param;
                            utmParams += key.startsWith("utm") ? `&${key}=${value}` : '';
                        }
                        return utmParams != '' ? utmParams : '';
                    },
                    searchRequestUrl: function() {
                        var fetchURL =    this.apiURL 
                                    + (this.checkedCategories.length !== 0 ? '&categories=' + this.checkedCategories.join() : 'noPost=1')
                                    + ((this.whitepaper && !this.allCategoriesModel) || this.allCategoriesModel ? '&whitepaper=1' : '')
                                    + ((this.webinar && !this.allCategoriesModel) || this.allCategoriesModel ? '&webinar=1' : '')
                                    + ((this.checkedDownloadable.length !== 0) ? '&digitalDownload=' + this.checkedDownloadable.join() : '&digitalDownload=' + "{{allDownloadable|join(',')}}")
                                    + (this.checkedProductsServices.length !== 0 ? '&products_services=' + this.checkedProductsServices.join() : '')
                                    + (this.checkedSectors.length !== 0 ? '&sectors=' + this.checkedSectors.join() : '');

                        if (this.allCategoriesModel) {
                            fetchURL = fetchURL.replace('noPost=1', '');
                        }else{
                            fetchURL = fetchURL.replace('&digitalDownload=' + "{{allDownloadable|join(',')}}", '');
                        }

                        fetchURL = fetchURL + "&per_page=5&page=" + this.currentPage;

                        if(this.popstateLoad === false) {
                            history.pushState({
                                checkedCategories:          [...this.checkedCategories],
                                whitepaper:                 this.whitepaper,
                                webinar:                    this.webinar,
                                checkedDownloadable:        [...this.checkedDownloadable],
                                checkedProductsServices:    [...this.checkedProductsServices],
                                checkedSectors:             [...this.checkedSectors],
                            }, 'News', this.frontendSearchUrl);
                        }

                        this.popstateLoad = false;

                        return fetchURL;
                    },
                    fetchAPIData: function(pageNumber) {
                        this.responseAvailable = false;
                        this.emptyResult = false;
                        this.currentPage = pageNumber != null ?  pageNumber : 1;
                        const utmTags = '?' + this.utmTagsRemain().substring(1);

                        var requestUrl = this.searchRequestUrl();
                        console.log(requestUrl);
                        
                        fetch(requestUrl)
                        .then(async function(response) {
                            if (!response.ok) {
                                throw new Error('HTTP error, status = ' + response.status);
                            }
                            return response.json();
                        })
                        .then((jsonResponse) => {
                            this.numberOfPages  = jsonResponse.meta['X-WP-TotalPages'];
                            this.totalResults   = jsonResponse.meta['X-WP-Total'];
                            this.results = jsonResponse.body;

                            for(var i = 0; i < jsonResponse.body.length; i++) {
                                jsonResponse.body[i].modifiedDate = this.formatDate(jsonResponse.body[i].modified);
                                jsonResponse.body[i].postType = jsonResponse.body[i].acf.category_type;
                                jsonResponse.body[i].index = i;
                                switch(jsonResponse.body[i].postType) {
                                    case 'Whitepaper':
                                        postLink = appBaseUrl+ "/whitepaper/request/" + jsonResponse.body[i].id +"/" + jsonResponse.body[i].slug + utmTags;
                                        postDescription = jsonResponse.body[i].excerpt.rendered;
                                        categoriesLink = appBaseUrl + "/news/?&whitepaper=1";
                                        break;
                                    case 'Webinar':
                                        postLink = appBaseUrl+ "/webinar/request/" + jsonResponse.body[i].id +"/" + jsonResponse.body[i].slug + utmTags;
                                        postDescription = jsonResponse.body[i].excerpt.rendered;
                                        categoriesLink = appBaseUrl + "/news/?&webinar=1";
                                        break;
                                    case 'Downloadable':
                                        jsonResponse.body[i].postType = jsonResponse.body[i].acf.content_type_name;
                                        postLink = appBaseUrl+ "/downloadable-resource/request/" + jsonResponse.body[i].id +"/" + jsonResponse.body[i].slug + utmTags;
                                        postDescription = jsonResponse.body[i].excerpt.rendered;
                                        categoriesLink = appBaseUrl +"/news/?digitalDownload=" + jsonResponse.body[i].acf.content_type_id;
                                        break;
                                    default:
                                        postLink = appBaseUrl+ "/news/" + jsonResponse.body[i].slug;
                                        postDescription = jsonResponse.body[i].acf.post_lead_text
                                        categoriesLink = appBaseUrl +"/news?categories=" + jsonResponse.body[i].categories[0];
                                        break;
                                }

                                jsonResponse.body[i].postLink = postLink;
                                jsonResponse.body[i].postDescription = postDescription;
                                jsonResponse.body[i].CategoriesLink = categoriesLink

                                jsonResponse.body[i].imageSet = false;

                                if (jsonResponse.body[i].acf.featured_image_url != false) {
                                    jsonResponse.body[i].imageSet = true;
                                    jsonResponse.body[i].imageURL = jsonResponse.body[i].acf.featured_image_url;
                                    jsonResponse.body[i].altText  = jsonResponse.body[i].acf.alt_text;
                                }
                            }

                            if( Object.keys(jsonResponse.body).length === 0 ){
                                this.emptyResult = true;
                                this.responseAvailable = null;
                            }else{
                                this.responseAvailable = true;
                            }
                        })
                        .catch((error) => {
                            console.log('An error occurred while fetching the API data');
                            console.log(error);
                            this.responseAvailable = false;
                        });
                    },
                    updatePageValue: function(newPageValue) {
                        this.currentPage = newPageValue;
                        this.fetchAPIData(newPageValue);
                    },
                    setupHistoryApi: function() {
                        window.onpopstate = (event) => {
                            this.popstateLoad = true;

                            if(event.state == null) {
                                this.checkedCategories          = [];
                                this.whitepaper                 = false;
                                this.webinar                    = false;
                                this.checkedDownloadable        = [];
                                this.checkedProductsServices    = [];
                                this.checkedSectors             = [];
                                return;
                            }

                            this.checkedCategories          = event.state.checkedCategories;
                            this.whitepaper                 = event.state.whitepaper;
                            this.webinar                    = event.state.webinar;
                            this.checkedDownloadable        = event.state.checkedDownloadable;
                            this.checkedProductsServices    = event.state.checkedProductsServices;
                            this.checkedSectors             = event.state.checkedSectors;
                        }
                    }
                }
            })


            app.component('results-pagination', {
                delimiters: ['{[', ']}'],
                props: {
                    currentPage: Number,
                    totalResults: Number,
                    numberOfPages: Number,
                },
                computed: {
                    nextPage() {
                        return this.currentPage == this.numberOfPages ? this.currentPage : this.currentPage + 1;
                    },
                    previousPage() {
                        return this.currentPage == 1 ? this.currentPage : this.currentPage - 1;
                    },
                    paginationStartNumber() {
                        var linksStartPage = 1;
                        if ((this.currentPage - 2) < 2 ) {
                            linksStartPage = 2;
                        } else {
                            linksStartPage = this.currentPage - 2;
                        }

                        if((this.currentPage + 2) > this.numberOfPages) {
                            linksStartPage = linksStartPage - 2;
                        }

                        if(linksStartPage <= 1 ) {
                            linksStartPage = 2;
                        }
                        return linksStartPage;
                    },
                    paginationEndNumber() {
                        var linksEndPage = this.paginationStartNumber + 4;
                        
                        if ((linksEndPage >= this.numberOfPages)) {
                            linksEndPage = this.numberOfPages - 1;
                        }
                        
                        if(this.numberOfPages == 1) {
                            linksEndPage = 1;
                        }

                        return linksEndPage;
                    }
                },
                methods: {
                    updatePageNumber(event, newPage) {
                        event.preventDefault();
                        this.$emit('update-page', newPage);
                    },
                    range(start, end) {
                        return Array(end - start + 1).fill().map((_, idx) => start + idx);
                    }
                },
                template: 
                    `
                    <div>
                        <ul class="list--inline pagination govuk-body" role="list" aria-label="Pagination" v-if="numberOfPages > 0">
                            <li class="pagination__item pagination__item--previous" v-if="currentPage != 1">
                                <a href="#" rel="previous" v-on:click="updatePageNumber($event, previousPage)">
                                    <span class="icon">
                                        <svg width="17" height="14" xmlns="http://www.w3.org/2000/svg"><path d="M6.7 0l1.4 1.4-4.3 4.3h13v2H3.9l4.2 4-1.4 1.4L0 6.7z" fill="#007194" fill-rule="evenodd"></path></svg>
                                    </span>
                                    <span>Previous</span> <span class="visuallyhidden">page</span>
                                </a>
                            </li>

                            <li class="pagination__item">
                                <span v-if="currentPage == 1"><span class="visuallyhidden">Page </span>1</span>
                                <a v-else href="#" v-on:click="updatePageNumber($event, 1)"><span class="visuallyhidden">Page </span>1</a>
                            </li>

                            <li class="pagination__item" v-if="paginationStartNumber > 2">…</li>

                            <li class="pagination__item" v-for="page in range(paginationStartNumber, paginationEndNumber)" v-if="numberOfPages > 1">
                                <span v-if="page == currentPage"><span class="visuallyhidden">Page </span>{[ page ]}</span>
                                <a v-else href="#" v-on:click="updatePageNumber($event, page)"><span class="visuallyhidden">Page </span>{[ page ]}</a>
                            </li>

                            <li class="pagination__item" v-if="(paginationEndNumber + 1) < numberOfPages">…</li>

                            <li class="pagination__item" v-if="numberOfPages > 1">
                                <span v-if="currentPage == numberOfPages"><span class="visuallyhidden">Page </span>{[ numberOfPages ]}</span>
                                <a v-else href="#" v-on:click="updatePageNumber($event, numberOfPages)"><span class="visuallyhidden">Page </span>{[ numberOfPages ]}</a>
                            </li>

                            <li class="pagination__item pagination__item--next" v-if="currentPage != numberOfPages">
                                <a href="#" rel="next" v-on:click="updatePageNumber($event, nextPage)">
                                    <span>Next</span> <span class="visuallyhidden">page</span>
                                    <span class="icon">
                                        <svg width="17" height="14" xmlns="http://www.w3.org/2000/svg"><path d="M10.1 0L8.7 1.4 13 5.7H0v2h12.9l-4.2 4 1.4 1.4 6.7-6.4z" fill="#007194" fill-rule="evenodd"></path></svg>
                                    </span>
                                </a>
                            </li>
                        </ul>
                    </div>
                    `
            });

            app.mount('#main-content');

        </script> 
    </div>

{% endblock %}
