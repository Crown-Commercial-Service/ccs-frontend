{% extends 'base.html.twig' %}

{% block title %}Search agreements - CCS{% endblock %}
{% block metadescription %}This list provides a summary of the CCS agreements currently available through which government, public and third sector organisations can buy common goods and services. It includes details of when each agreement is due to expire and a web link to the full agreement information.{% endblock %}

{% block header %}
    {% embed '/includes/header.html.twig' %}
        {% block bannerarea %}
        {% endblock %}
    {% endembed %}
{% endblock %}

{% block body %}

    <div class="govuk-width-container">
        <div class="govuk-phase-banner">
            {% include '/includes/phase-banner-content.html.twig' %}
        </div>

        <p class="visuallyhidden">This is a page with JS</p>

        <div class="govuk-breadcrumbs">
            <ol class="govuk-breadcrumbs__list">
                <li class="govuk-breadcrumbs__list-item">
                    <a class="govuk-breadcrumbs__link" href="/">Home</a>
                </li>
                <li class="govuk-breadcrumbs__list-item">
                    <a class="govuk-breadcrumbs__link" href="/agreements">Search agreements </a>
                </li>
            </ol>
        </div>

        <main id="main-content" role="main" class="govuk-main-wrapper">
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-full hideWithoutJS govuk-visually-hidden">
                    <h1 v-if="displayKeyword" class="govuk-heading-xl page-title">Search agreements for {[displayKeyword]}</h1>
                    <h1 v-else class="govuk-heading-xl page-title">Search agreements</h1>
                </div>
                <div v-show="!javascriptVersion" class="govuk-grid-column-full">
                    {% if filters.keyword is defined and filters.keyword|trim is not empty %}
                        <h1 class="govuk-heading-xl page-title">Search agreements for {{filters.keyword}}</h1>
                    {% else %}
                        <h1 class="govuk-heading-xl page-title">Search agreements</h1>
                    {% endif %}
                </div>
            </div>


            <div class="govuk-grid-row">
                {% include '/frameworks/_filter_options.html.twig' %}

                <div class="govuk-grid-column-two-thirds">
                    <h2 class="govuk-heading-m ccs-font-weight-semibold govuk-!-font-size-24" aria-live="assertive">
                        <span v-if="searchResultsNumber == 1" v-show="javascriptVersion" style="display: none;"> {[ searchResultsNumber ]} agreement found</span>
                        <span v-else                          v-show="javascriptVersion" style="display: none;"> {[ searchResultsNumber ]} agreements found</span>

                        <span v-if="!javascriptVersion">{{ pagination.totalResults }} agreement{{pagination.totalResults != 1 ? 's'}} found</span>
                    </h2>
                </div>

                <div v-if="displayKeyword" class="govuk-grid-column-two-thirds hideWithoutJS govuk-visually-hidden">
                    <div class="ccs-filters-summary ccs-filter-summary-frameworks">
                        <div class="ccs-filters-summary__facets" style="display: block; margin-top:0">
                            <span class="ccs-filters-summary__label">Containing</span>
                            <ul class="ccs-filters-summary__list">
                                <li class="ccs-filters-summary__facet">
                                        <a style="cursor: pointer;" @click="clearSearchKeyword" class="ccs-filters-summary__facet__cancel"> <span>{[ displayKeyword]}</span> </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                {% if filters.keyword is defined and filters.keyword|trim is not empty %}
                    <div v-show="!javascriptVersion" class="govuk-grid-column-two-thirds">
                        <div class="ccs-filters-summary ccs-filter-summary-frameworks">
                            <div class="ccs-filters-summary__facets" style="display: block; margin-top:0">
                                <span class="ccs-filters-summary__label">Containing</span>
                                <ul class="ccs-filters-summary__list">
                                    <li class="ccs-filters-summary__facet">
                                        <a href="/agreements" class="ccs-filters-summary__facet__cancel">
                                            <span>{{ filters.keyword }}</span>
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                {% endif %}

                <div class="govuk-grid-column-two-thirds">

                    <div v-if="responseAvailable" class="hideWithoutJS govuk-visually-hidden">
                        <ul class="govuk-list govuk-list--frameworks" v-show="javascriptVersion">
                            <li v-show="javascriptVersion" v-for="result in results">
                                <h3 class="govuk-heading-m ccs-heading-link ccs-heading-link--inline govuk-!-margin-bottom-2 ccs-font-weight-semibold govuk-!-font-size-22">
                                    <a  v-bind:href="'/agreements/'+ result.rm_number" >{[ result.title ]}</a> 
                                    <span v-if="result.status == 'Expired - Data Still Received'" class="govuk-tag ccs-tag ccs-tag--error"> Expired: {[ toDateDMY(result.end_date) ]} </span>
                                </h3>

                                <ul class="list--inline govuk-body-s govuk-!-margin-bottom-2">
                                    <li> <strong>Agreement ID:</strong> {[ result.rm_number ]}   </li>
                                    <li> <strong>Start Date:</strong>   {[ toDateDMY(result.start_date) ]}  </li>
                                    
                                    <li v-if="result.status == 'Expired - Data Still Received'"> <strong>End Date:</strong> {[ toDateDMY(result.end_date)  ]} </li>

                                    <li v-if="result.regulation != null"> <strong>Regulation:</strong> {[ result.regulation ]} </li>
                                </ul>
                                <p class="govuk-body-s" v-html="result.summary"></p> 
                            </li>
                        </ul>

                        <results-pagination 
                            :total-results="totalResults" 
                            :number-of-pages="numberOfPages" 
                            :current-page="currentPage" 
                            v-on:update-page="updatePageValue($event)" 
                        ></results-pagination>
                    </div>

                    <div v-else-if="responseAvailable === false" class="hideWithoutJS govuk-visually-hidden">
                        <p>Loading results ...</p>
                    </div>

                    <div v-if="emptyResult" class="hideWithoutJS govuk-visually-hidden">
                        <div v-if="checkedRegulation.length == 1 && checkedRegulation.includes('PCR2006') || checkedType.length == 1 && checkedType.includes('PCR06+Framework')" >
                            <p>All agreements under The Public Contracts Regulation (PCR) 2006 are now expired. <br>You can view these archived agreements by clicking 'Expired' on the left side of this page.</p>
                        </div>
                        <div v-else>
                            <h3>There are no matching results.</h3>
                            <p class="govuk-!-margin-bottom-0">Improve your search results by:</p>
                            <ul>
                                <li><p class="govuk-!-margin-bottom-1">removing filters</p></li>
                                <li v-if="keyword"><p class="govuk-!-margin-bottom-1">double-checking your spelling</p></li>
                                <li v-if="keyword"><p class="govuk-!-margin-bottom-1">using fewer keywords</p></li>
                                <li v-if="keyword"><p class="govuk-!-margin-bottom-1">clicking 'start now' and answering a few simple questions to find the best agreement for your needs</p></li>
                            </ul>
                            <br>
                            <p>If you are still unable to find what you need, contact our customer service centre using our <a class="govuk-link" href="/contact">contact us form</a>.</p>
                        </div>

                    </div>

                    <div v-show="!javascriptVersion">
                        {% include '/frameworks/_resultWithoutJS.html.twig' %}
                    </div>

                </div>
            </div>
            {# appear only on mobile #}
            <div id="helpful-info-search-agreement-mobile" style="display: none;">
                {% include '/frameworks/_helpful_info.html.twig' with {'page' : 'search'} %}
            </div>

        </main>
    </div>

    {% if app.environment == "prod" %}
        <script src="/assets/scripts/libraries/vue.min.js?v=1"></script>
        <script>pushToDataLayer({'event': 'page_view', 'page_referrer': window.location.href, 'page_type': 'agreement'});</script>
    {% else %}
        <script src="/assets/scripts/libraries/vue.js?v=1"></script>
    {% endif %}

    <script type="application/javascript"> 
        searchFilterAgreement();
        openFiltersOnMobile();

        function openFiltersOnMobile () {
            var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            var filterAccordion = document.querySelectorAll('.govuk-accordion__section--expanded');
            if (windowWidth < 641 && filterAccordion.length > 0) {
                filterAccordion.forEach(function(section) {
                    section.classList.remove('govuk-accordion__section--expanded');
                });
            }
        }

        function supportsLiterals() {
            try{
                return eval("''===``");
            }
            catch(e){
                return false;
            }
        }

        if(!('Promise' in window) || !supportsLiterals() || !window.fetch) {
            throw new Error("Your browser doesn't support the necessary JavaScript functions to use the enhanced search and has been served a non-JavaScript version");
        }


        var apiBaseUrl                  = '{{ api_base_url }}';
        var appBaseUrl                  = '{{ app_base_url }}';
        var pageNumber                  = {% if pageNumber is defined and pageNumber is not empty %}{{ pageNumber }}{% else %}1{% endif %};
        var totalResults                = {{ pagination.totalResults }};
        var keyword                     = null;
        var checkedStatus               = [];
        var checkedRegulation           = [];
        var checkedType                 = [];
        var checkedPillar               = [];
        var checkedCategory             = [];
        var pillars                     = new Map();
        var pillarsSize                 = '{{ pillars.pillars|length }}';
        var categorySize                = '{{ categories|length }}';
        
        {% if filters.keyword is defined and filters.keyword is not null and filters.keyword is not empty %}
            var keyword = '{{ filters.keyword }}';
        {% endif %}

        {% if filters.checkedStatus is defined and filters.checkedStatus is not empty %}
            var checkedStatus   = JSON.parse('{{ filters.checkedStatus|json_encode|e("js") }}');
        {% endif %}

        {% if filters.checkedRegulation is defined and filters.checkedRegulation is not empty %}
            var checkedRegulation   = JSON.parse('{{ filters.checkedRegulation|json_encode|e("js") }}');
        {% endif %}

        {% if filters.checkedType is defined and filters.checkedType is not empty %}
            var checkedType   = JSON.parse('{{ filters.checkedType|json_encode|e("js") }}');
        {% endif %}

        {% if filters.checkedPillar is defined and filters.checkedPillar is not empty %}
            var checkedPillar   = JSON.parse('{{ filters.checkedPillar|json_encode|e("js") }}');
        {% endif %}

        {% if filters.checkedCategory is defined and filters.checkedCategory is not empty %}
            var checkedCategory   = JSON.parse('{{ filters.checkedCategory|json_encode|e("js") }}');
        {% endif %}

         {% if pillars.pillars is defined and pillars.pillars is not empty %}
            var allPillar   = JSON.parse('{{ pillars.pillars|json_encode|e("js") }}');

            for(var i = 0; i < allPillar.length; i++) {  
                categoryNames = allPillar[i].categories.map(category => category.slug.toLowerCase());
                pillars.set(allPillar[i].name, categoryNames);
            }
        {% endif %}

        var app = Vue.createApp({
            delimiters: ['{[', ']}'],
            data() {
                return {
                    javascriptVersion: true,
                    results: "",
                    responseAvailable: null,
                    emptyResult: false,
                    apiURL:  apiBaseUrl + "frameworks?",
                    keyword: keyword,
                    displayKeyword: null,
                    checkedStatus: checkedStatus,
                    checkedRegulation: checkedRegulation,
                    checkedType: checkedType,
                    checkedPillar: checkedPillar,
                    checkedCategory: checkedCategory,
                    pillars: pillars,
                    currentPage: pageNumber,
                    pillarsSize: pillarsSize,   
                    categorySize: categorySize,
                    numberOfPages: Number,
                    totalResults: Number,
                    searchResultsNumber: totalResults,
                    popstateLoad: false,
                    isUpdatingCategories : false
                }
            },
            mounted() {
                this.fetchAPIData(this.currentPage);
                this.setupHistoryApi();  
            },
            created(){
                // making sure the sections that is hidden at start shows
                this.$nextTick(() => {
                    const hideWithOutJS = document.querySelectorAll('.hideWithoutJS');
                    hideWithOutJS.forEach(section => {
                        if (section.classList.contains('govuk-visually-hidden')) {
                            section.classList.remove('govuk-visually-hidden');
                        }
                    });
                });
            },
            watch: {
                responseAvailable(responseAvailable) {
                    this.$nextTick(() => {
                        const hideWithOutJS = document.querySelectorAll('.hideWithoutJS');
                        hideWithOutJS.forEach(section => {
                            if (section.classList.contains('govuk-visually-hidden')) {
                                section.classList.remove('govuk-visually-hidden');
                            }
                        });
                    });
                },
                keyword(keyword){
                    if(this.keyword.trim().length == 0 || /^[\-\(\)&]*$/.test(this.keyword)){
                        this.keyword = "";
                    }
                    this.keyword = this.keyword
                        .replace(/\//g, "")                   // Remove slashes
                        .replace(/[^a-zA-Z0-9\s\-&()]/g, ""); // Allow letters, numbers, spaces, and the specified characters
                },
                searchRequestUrl: function() {

                    // if the searchRequestUrl hasn't been updated by a popstate
                    // event (back/forward button) then we push a state item to the
                    // JS History API
                    if(this.popstateLoad === false) {
                        history.pushState({
                            checkedStatus:      this.checkedStatus,
                            checkedRegulation:  this.checkedRegulation,
                            checkedType:        this.checkedType,
                            checkedPillar:      this.checkedPillar,
                            checkedCategory:    this.checkedCategory,
                            keyword:            this.keyword,
                        }, 'Agreements', this.frontendSearchUrl);
                    }

                    // reset the popstateLoad property to false
                    this.popstateLoad = false;
                },
                checkedStatus: function(checkedStatus) {
                    if (checkedStatus.length === 0 ) {
                        this.checkedStatus = ["Live"];
                    }
                    this.fetchAPIData(null)
                },
                checkedRegulation: function(checkedRegulation) {
                    if (checkedRegulation.length === Number("{{regulation|length}}")) {
                        
                        this.checkedRegulation = [];
                    }
                    this.fetchAPIData(null)
                },
                checkedType: function(checkedType) {
                    if (checkedType.length === Number("{{regulationType|length}}")) {
                        this.checkedType = [];
                    }
                    this.fetchAPIData(null)
                },
                checkedPillar: function(checkedPillar) {
                    if (checkedPillar.length == pillarsSize) {
                        this.checkedPillar = [];
                        this.checkedCategory = [];
                    }
                    this.fetchAPIData(null)
                },
                checkedCategory: function(checkedCategory) {
                    if (checkedCategory.length == categorySize) {
                        this.checkedCategory = [];
                    }
                    const pillarsAndCategories = {{ pillarsAndCategories|json_encode|raw }};

                    for (const [pillarName, categories] of Object.entries(pillarsAndCategories)) {
                        const pillarCategories = Object.keys(categories);
                        const formattedPillarName = pillarName.charAt(0).toUpperCase() + pillarName.slice(1);
                    
                        const allCategoriesSelected = pillarCategories.every(category => 
                            checkedCategory.includes(category.replace(/ /g, '+'))
                        );

                        const pillarIndex = this.checkedPillar.indexOf(formattedPillarName);
                        if (allCategoriesSelected && pillarIndex === -1) {
                            this.checkedPillar.push(formattedPillarName);
                        } else if (!allCategoriesSelected && pillarIndex !== -1) {
                            this.checkedPillar.splice(pillarIndex, 1);
                        }
                    }

                    this.fetchAPIData(null);
                }
            },
            computed: {
                frontendQueryUrl: function() {
                    var queryUrl = '/?' 
                        + ((this.checkedStatus || []).length !== 0    ? '&status=' + this.checkedStatus.join() : '')
                        + ((this.checkedRegulation || []).length !== 0   ? '&regulation=' + this.checkedRegulation.join() : '')
                        + ((this.checkedType|| []).length !== 0   ? '&type=' + this.checkedType.map(str => str.replace(/ /g, '+')).join() : '')
                        + ((this.checkedPillar|| []).length !== 0   ? '&pillar=' + this.checkedPillar.join() : '')
                        + ((this.checkedCategory|| []).length !== 0 ? '&category=' + this.checkedCategory.map(str => str.replace(/ /g, '+')).join() : '')
                        + (this.keyword                ? '&keyword=' + this.keyword : '')
                        + (this.currentPage            ? '&page=' + this.currentPage : '');

                        return queryUrl !== '/?' ? queryUrl : "";
                },
                frontendSearchUrl: function() {
                    var searchUrl = '/agreements' + this.frontendQueryUrl ;
                    return searchUrl;
                },
                allRegulationModel: {
                    get() {
                        return (this.checkedRegulation || []).length === 0;
                    },
                    set(checked) {
                        if (checked) {
                            this.checkedRegulation = [];
                        }else{
                            document.getElementById("allRegulation").checked = true
                        }
                    }
                },
                allTypeModel: {
                    get() {
                        return (this.checkedType || []).length === 0;
                    },
                    set(checked) {
                        if (checked) {
                            this.checkedType = [];
                        }else{
                            document.getElementById("allType").checked = true
                        }
                    }
                },
                allPillarModel: {
                    get() {
                        if (this.checkedPillar.length === 0 && this.checkedCategory.length === 0) {
                            return true;
                        }
                        return false;
                    },
                    set(checked) {
                        if (checked) {
                            this.checkedPillar = [];
                            this.checkedCategory = [];
                        }else{
                            document.getElementById("allPillarAndCategory").checked = true
                        }
                    }
                },
            },
            methods: {
                searchRequestUrl: function() {
                    fetchURL =    this.apiURL 
                            +  (this.checkedStatus.length !== 0 ? '&status[]=' + this.checkedStatus.join() : '')
                            +  (this.checkedRegulation.length !== 0 ? this.checkedRegulation.map(reg => '&regulation[]=' + reg.replace(/ /g, '+')).join('') : '')
                            +  (this.checkedType.length !== 0 ? this.checkedType.map(type => '&regulation_type[]=' + type.replace(/ /g, '+')).join('') : '')
                            +  (this.checkedPillar.length !== 0 ? this.checkedPillar.map(pillar => '&pillar[]=' + pillar).join(''): '')
                            +  (this.checkedCategory.length !== 0 ? this.checkedCategory.map(cat => '&category[]=' + cat).join('') : '')
                            +  (this.keyword ? '&keyword=' + this.keyword.replace(/&/g, '') : '')
                    
                    fetchURL = fetchURL + "&per_page=20&page=" + this.currentPage;

                    if(this.popstateLoad === false) {
                        history.pushState({
                            checkedStatus          :[...this.checkedStatus],
                            checkedRegulation      :[...this.checkedRegulation],
                            checkedType            :[...this.checkedType],
                            checkedPillar          :[...this.checkedPillar],
                            checkedCategory        :[...this.checkedCategory],
                            keyword                :this.keyword,
                        }, 'Agreements', this.frontendSearchUrl);
                    }

                    // reset the popstateLoad property to false
                    this.popstateLoad = false;

                    return fetchURL;
                },
                toDateDMY: function (value) {
                    if (!value) return ''
                    date = new Date(value);
                    return date.getDate().toString().padStart(2, '0') + '/'+ (date.getMonth() + 1).toString().padStart(2, '0') + '/' + date.getFullYear();
                },
                searchKeyword: function() {

                    if (this.keyword){
                        
                        if(this.popstateLoad === false) {
                            history.pushState({
                                checkedStatus          :this.checkedStatus,
                                checkedRegulation      :this.checkedRegulation,
                                checkedType            :this.checkedType,
                                checkedPillar          :this.checkedPillar,
                                checkedCategory        :this.checkedCategory,
                                keyword                :this.keyword,
                            }, 'Agreements', this.frontendSearchUrl);
                        }

                        // reset the popstateLoad property to false
                        this.popstateLoad = false;

                        this.displayKeyword = this.keyword
                        
                        return "&keyword=" + this.keyword.replace(/&/g, '');
                    }
                    this.displayKeyword = null
                    return ""
                },
                clearSearchKeyword: function() {
                    this.keyword = ""
                    this.displayKeyword = null
                    this.fetchAPIData(null,null)
                },
                resetAllFilter: function() {
                    this.keyword = ""
                    this.displayKeyword = null
                    this.checkedStatus = ["Live"]
                    this.checkedRegulation = []
                    this.checkedType = []
                    this.checkedPillar = []
                    this.checkedCategory = []
                    this.pillars = []
                    this.fetchAPIData(null,null)
                },
                fetchAPIData: function(pageNumber) {
                    this.responseAvailable = false;
                    this.emptyResult = false;
                    this.currentPage = typeof pageNumber == "number" ?  pageNumber : 1;

                    var requestUrl = this.searchRequestUrl()
                    
                    console.log(requestUrl);

                    fetch(requestUrl)
                    .then(async function(response) {
                        if (!response.ok) {
                            throw new Error('HTTP error, status = ' + response.status);
                        }
                        return response.json();
                    })
                    .then(jsonResponse => {
                        this.numberOfPages  = parseInt(Math.ceil(jsonResponse.meta.total_results / jsonResponse.meta.limit))
                        this.totalResults   = parseInt(jsonResponse.meta.total_results)
                        this.searchResultsNumber = jsonResponse.meta.total_results;

                        this.results = jsonResponse.results;
                        this.emptyResult = Object.keys(jsonResponse.results).length === 0 ? true : false
                        this.responseAvailable = true;

                        if (this.displayKeyword) {
                            pushToDataLayer({'event': 'view_search_results', 'interaction_type': 'agreements', 'search_term': self.displayKeyword, 'interaction_detail': self.searchResultsNumber});
                        }
                    })
                    .catch(error => {
                        console.log('An error occurred');
                        console.log(error);
                        this.responseAvailable = false;
                    });
                },
                updatePageValue: function(newPageValue) {
                    this.currentPage = Number(newPageValue);
                    this.fetchAPIData(newPageValue);
                },
                setupHistoryApi: function() {

                    window.onpopstate = function(event) {
                        // set the popstate variable to true so that we can
                        // tell in other parts of the code that the state change
                        // is being caused by the back/forward button
                        this.popstateLoad = true;

                        if(event.state == null) {
                            this.checkedStatus               = [];
                            this.checkedRegulation           = [];
                            this.checkedType                 = [];
                            this.checkedPillar               = [];
                            this.checkedCategory             = [];
                            this.keyword                     = null;
                            return
                        }

                        this.checkedStatus          = event.state.checkedStatus;
                        this.checkedRegulation      = event.state.checkedRegulation;
                        this.checkedType            = event.state.checkedType;
                        this.checkedPillar          = event.state.checkedPillar;
                        this.checkedCategory        = event.state.checkedCategory;
                        this.keyword                = event.state.keyword;

                        this.fetchAPIData(null, this.currentPage);
                    }
                },
                shouldShowTypeCheckbox: function (item) {
                     if (this.checkedRegulation.length === 0) {
                        return true;
                     }

                    const regulationMap = {
                        "Closed Framework": "PA2023",
                        "Dynamic Market": "PA2023",
                        "Open Framework": "PA2023",
                        "Dynamic Purchasing System": "PCR2015",
                        "PCR15 Framework": "PCR2015",
                        "PCR06 Framework": "PCR2006"
                    };

                    const requiredRegulation = regulationMap[item];
                    return requiredRegulation ? this.checkedRegulation.includes(requiredRegulation) : false;
                },
                removeTypeBasedOnReg: function () {
                    const checkboxMap = {
                        "PA2023": ["Closed+Framework", "Dynamic+Market", "Open+Framework"],
                        "PCR2015": ["Dynamic+Purchasing+System", "PCR15+Framework"],
                        "PCR2006": ["PCR06+Framework"]
                    };

                    for (const [key, types] of Object.entries(checkboxMap)) {
                        const currentCheckbox = document.getElementById(key);
                        if (currentCheckbox && !currentCheckbox.checked) {
                            types.forEach(type => {
                                const index = this.checkedType.indexOf(type);
                                if (index !== -1) {
                                    this.checkedType.splice(index, 1);
                                    this.fetchAPIData(type, this.currentPage);
                                }
                            });
                        }
                    }
                    
                },
            }
        });

        app.component('results-pagination', {
            delimiters: ['{[', ']}'],
            props: {
                currentPage: Number,
                totalResults: Number,
                numberOfPages: Number,
            },
            computed: {
                nextPage: function() {
                    if(this.currentPage == this.numberOfPages) {
                        return this.currentPage;
                    }
                    return this.currentPage + 1;
                },
                previousPage: function() {
                    if(this.currentPage == 1) {
                        return this.currentPage;
                    }
                    return this.currentPage - 1;
                },
                paginationStartNumber: function() {
                    // start page defaults to 2 (second page) because the
                    // first page link is always output by default
                    var linksStartPage = 1;

                    // if the start page is at the beginning of the pagination
                    // then account for this
                    if ((this.currentPage - 2) < 2 ) {
                        linksStartPage = 2;
                    } else {
                        // otherwise the start page is equal to the current
                        // page minus 2, this means that the pagination should
                        // have a couple of links either side of the current
                        // page, e.g.   2 3 [4] 5 6
                        linksStartPage = this.currentPage - 2;
                    }

                    // if the start page is very close to the last page, then
                    // account for this
                    if((this.currentPage + 2) > this.numberOfPages) {
                        linksStartPage = linksStartPage - 2;
                    }

                    if(linksStartPage <= 1 ) {
                        linksStartPage = 2;
                    }

                    return linksStartPage;
                },
                paginationEndNumber: function() {
                    var linksEndPage   = this.paginationStartNumber + 4;

                    // if there aren't more pages than the number we
                    // want to show by minimum, then the end page is just equal
                    // to the final result page

                    if ((linksEndPage >= this.numberOfPages)) {
                        // minus 1 because the last page is always output
                        linksEndPage = this.numberOfPages - 1;
                    }

                    if(this.numberOfPages == 1) {
                        linksEndPage = 1;
                    }

                    return linksEndPage;
                }
            },
            methods: {
                updatePageNumber: function(event, newPage) {
                    event.preventDefault();
                    this.$emit('update-page', newPage);
                    search.fetchAPIData(null, newPage)
                },
                range : function (start, end) {
                    return Array(end - start + 1).fill().map(function(_, idx) {
                        return start + idx;
                    });
                }
            },
            template: 
                `
                <div>
                    <ul class="list--inline pagination govuk-body" role="list" aria-label="Pagination" v-if="numberOfPages > 0">
                        <li class="pagination__item pagination__item--previous" v-if="currentPage != 1">
                            <a href="#" rel="previous" v-on:click="updatePageNumber($event, previousPage)">
                                <span class="icon">
                                    <svg width="17" height="14" xmlns="http://www.w3.org/2000/svg"><path d="M6.7 0l1.4 1.4-4.3 4.3h13v2H3.9l4.2 4-1.4 1.4L0 6.7z" fill="#007194" fill-rule="evenodd"></path></svg>
                                </span>
                                <span>Previous</span> <span class="visuallyhidden">page</span>
                            </a>
                        </li>

                        <li class="pagination__item">
                            <span v-if="currentPage == 1"><span class="visuallyhidden">Page </span>1</span>
                            <a v-else href="#" v-on:click="updatePageNumber($event, 1)"><span class="visuallyhidden">Page </span>1</a>
                        </li>

                        <li class="pagination__item" v-if="paginationStartNumber > 2">…</li>

                        <li class="pagination__item" v-for="page in range(paginationStartNumber, paginationEndNumber)" v-if="numberOfPages > 1">
                            <span v-if="page == currentPage"><span class="visuallyhidden">Page </span>{[ page ]}</span>
                            <a v-else href="#" v-on:click="updatePageNumber($event, page)"><span class="visuallyhidden">Page </span>{[ page ]}</a>
                        </li>

                        <li class="pagination__item" v-if="(paginationEndNumber + 1) < numberOfPages">…</li>

                        <li class="pagination__item" v-if="numberOfPages > 1">
                            <span v-if="currentPage == numberOfPages"><span class="visuallyhidden">Page </span>{[ numberOfPages ]}</span>
                            <a v-else href="#" v-on:click="updatePageNumber($event, numberOfPages)"><span class="visuallyhidden">Page </span>{[ numberOfPages ]}</a>
                        </li>

                        <li class="pagination__item pagination__item--next" v-if="currentPage != numberOfPages">
                            <a href="#" rel="next" v-on:click="updatePageNumber($event, nextPage)">
                                <span>Next</span> <span class="visuallyhidden">page</span>
                                <span class="icon">
                                    <svg width="17" height="14" xmlns="http://www.w3.org/2000/svg"><path d="M10.1 0L8.7 1.4 13 5.7H0v2h12.9l-4.2 4 1.4 1.4 6.7-6.4z" fill="#007194" fill-rule="evenodd"></path></svg>
                                </span>
                            </a>
                        </li>
                    </ul>
                </div>
                `
        });

        app.mount('#main-content');

    </script>

{% endblock %}
