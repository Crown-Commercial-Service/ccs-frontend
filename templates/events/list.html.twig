{% extends 'base.html.twig' %}

{% block title %}Events - CCS{% endblock %}

{% block header %}
    {% embed '/includes/header.html.twig' %}
        {% block bannerarea %}
        {% endblock %}
    {% endembed %}
{% endblock %}


{% block flourishClasses %}{% endblock %}


{% block body %}

    <div class="govuk-width-container">
        <div class="govuk-phase-banner">{% include '/includes/phase-banner-content.html.twig' %}</div>

        <div class="govuk-breadcrumbs">
            <ol class="govuk-breadcrumbs__list">
                <li class="govuk-breadcrumbs__list-item"><a class="govuk-breadcrumbs__link" href="/">Home</a></li>
                <li class="govuk-breadcrumbs__list-item" aria-current="page">Events</li>
            </ol>
        </div>

        <main id="main-content" role="main" class="govuk-main-wrapper govuk-main-wrapper--tight">
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds page-introduction">
                    <h1 class="govuk-heading-xl page-title page-title--tight">Events</h1>
                    <p class="govuk-body-l">Take a look at our upcoming events. You can filter them by category or sector. Click on the event to see more details and how to register to attend.</p>
                </div>
                <div class="govuk-grid-column-one-third">
                    <aside>
                        {% include '/includes/_csat-survey.html.twig' %}
                    </aside>
                    <br />
                </div>
            </div>

            <p class="visuallyhidden">This is a page with JS (VUE 3)</p>

            <div class="govuk-grid-row events-page-listing">
                <div class="govuk-grid-column-one-quarter">
                
                    <form action="{{ path('events_list') }}" method="GET">
                        <div class="govuk-grid-row">
                            <div class="govuk-grid-column-one-half">
                                <h2 class="govuk-heading-m">Filter events</h2>
                            </div>
                            <div class="govuk-grid-column-one-half" style="text-align:right;">
                                <a v-show="!javascriptVersion" href={{ path('events_list') }} class="govuk-link"> Clear filters </a>
                                <a @click="resetAll()" class="govuk-link"> Clear filters </a>
                            </div>
                         </div>

                        <button class="govuk-button" data-module="govuk-button" v-show="!javascriptVersion"> Filter </button>

                        {% if audience_tag is not empty %}
                            <fieldset class="govuk-fieldset" aria-describedby="filter_audience_tag">
                                <div class="govuk-accordion ccs-accordion ccs-accordion--clean" data-module="govuk-accordion" id="filter_audience_tag">

                                    {% set AudienceForTwig = filters.audience_tag is defined and filters.audience_tag is not empty ? filters.audience_tag|split(',') : [] %}

                                    <div class="govuk-accordion__section ccs-accordion__section--clean govuk-form-group govuk-form-group--enclosure ccs-form-group--enclosure--tight govuk-accordion__section">
                                        <div class="govuk-accordion__section-header">
                                            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                                                <h2 class="govuk-accordion__section-heading">
                                                    <span class="no-top-line govuk-accordion__section-button ccs-accordion__section-button" id="accordion-for-audience-tag">
                                                        Event audience
                                                    </span>
                                                </h2>
                                            </legend>
                                        </div>

                                        <div id="filter_audience_tag-content-1" role="region" class="govuk-accordion__section-content" aria-labelledby="accordion-for-audience-tag">
                                            <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                <input v-model="allAudienceModel" name="allAudience" value="allAudience" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="allAudience" type="checkbox" {{ filters.audience_tag is defined and filters.audience_tag is empty  ? 'checked' }}>
                                                <label class="govuk-label govuk-checkboxes__label" for="allAudience">
                                                    View all
                                                </label>
                                            </div>

                                            {% for item in audience_tag|sort %}
                                                <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                    <input v-model="checkedEventAudience" :value="{{ item.id }}" name="audience_tag[]" value={{item.id}} class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.id}}+{{item.slug}}" type="checkbox" {{ item.id in AudienceForTwig ? 'checked' }}>
                                                    <label class="govuk-label govuk-checkboxes__label" for="{{item.id}}+{{item.slug}}">
                                                        {{ item.name }}
                                                    </label>
                                                </div>
                                            {% endfor %}

                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        {% endif %}

                        {% if event_type is not empty %}
                            <fieldset class="govuk-fieldset" aria-describedby="filter_events">
                                <div class="govuk-accordion ccs-accordion ccs-accordion--clean" data-module="govuk-accordion" id="filter_events">

                                    {% set TypeForTwig = filters.event_type is defined and filters.event_type is not empty ? filters.event_type|split(',') : [] %}

                                    <div class="govuk-accordion__section ccs-accordion__section--clean govuk-form-group govuk-form-group--enclosure ccs-form-group--enclosure--tight govuk-accordion__section">
                                        <div class="govuk-accordion__section-header">
                                            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                                                <h2 class="govuk-accordion__section-heading">
                                                    <span class="no-top-line govuk-accordion__section-button ccs-accordion__section-button" id="accordion-for-event-type">
                                                        Event type
                                                    </span>
                                                </h2>
                                            </legend>
                                        </div>

                                        <div id="filter_events-content-1" role="region" class="govuk-accordion__section-content" aria-labelledby="accordion-for-event-type">
                                            <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                <input v-model="allTypeModel" name="allType" value="allType" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="allType" type="checkbox" {{ filters.event_type is defined and filters.event_type is empty  ? 'checked' }}>
                                                <label class="govuk-label govuk-checkboxes__label" for="allType">
                                                    View all
                                                </label>
                                            </div>

                                            {% for item in event_type|sort %}
                                                <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                    <input v-model="checkedEventType" :value="{{ item.id }}" name="event_type[]" value={{ item.id }} class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.id}}+{{item.slug}}" type="checkbox" {{ item.id in TypeForTwig ? 'checked' }}>
                                                    <label class="govuk-label govuk-checkboxes__label" for="{{item.id}}+{{item.slug}}">
                                                        {{ item.name }}
                                                    </label>
                                                </div>
                                            {% endfor %}

                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        {% endif %}

                        {% if products_services is not empty %}
                            <fieldset class="govuk-fieldset" aria-describedby="products-services-accordion">
                                <div class="govuk-accordion ccs-accordion ccs-accordion--clean" data-module="govuk-accordion" id="products-services-accordion">
                                
                                    {% set PSForTwig = filters.products_services is defined and filters.products_services is not empty ? filters.products_services|split(',') : [] %}

                                    <div class="govuk-accordion__section ccs-accordion__section--clean govuk-form-group govuk-form-group--enclosure ccs-form-group--enclosure--tight">
                                        <div class="govuk-accordion__section-header">
                                            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                                                <h2 class="govuk-accordion__section-heading">
                                                    <span class="no-top-line govuk-accordion__section-button ccs-accordion__section-button" id="products-services-accordion-heading">
                                                        Products and services
                                                    </span>
                                                </h2>
                                            </legend>
                                        </div>

                                        <div id="products-services-accordion-content-1" role="region" class="govuk-accordion__section-content" aria-labelledby="products-services-accordion-heading">

                                            <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                <input v-model="allPSModel" name="allPS" value="allPS" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="allPS" type="checkbox" {{ filters.products_services is defined and filters.products_services is empty  ? 'checked' }}>
                                                <label class="govuk-label govuk-checkboxes__label" for="allPS">
                                                    View all
                                                </label>
                                            </div>

                                            {% for item in products_services|sort %}
                                                <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                    <input v-model="checkedProductsServices" :value="{{ item.id }}" name="product_service[]" value={{item.id}} class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.id}}+{{item.slug}}" type="checkbox" {{ item.id in PSForTwig ? 'checked' }}>
                                                    <label class="govuk-label govuk-checkboxes__label" for="{{item.id}}+{{item.slug}}">
                                                        {{ item.name }}
                                                    </label>
                                                </div>
                                            {% endfor %}

                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        {% endif %}

                        {% if sectors is not empty %}
                            <fieldset class="govuk-fieldset" aria-describedby="sectors-accordion">

                                <div class="govuk-accordion ccs-accordion ccs-accordion--clean" data-module="govuk-accordion" id="sectors-accordion">

                                    {% set sectorsForTwig = filters.sectors is defined and filters.sectors is not empty ? filters.sectors|split(',') : [] %}

                                    <div class="govuk-accordion__section ccs-accordion__section--clean govuk-form-group govuk-form-group--enclosure ccs-form-group--enclosure--tight">
                                        <div class="govuk-accordion__section-header">
                                            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                                                <h3 class="govuk-accordion__section-heading">
                                                    <span class="no-top-line govuk-accordion__section-button ccs-accordion__section-button" id="sectors-accordion-heading">
                                                        Sectors
                                                    </span>
                                                </h3>
                                            </legend>
                                        </div>
                                        <div id="sectors-accordion-content-1" role="region" class="govuk-accordion__section-content" aria-labelledby="sectors-accordion-heading">

                                            <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                <input v-model="allSectorsModel" name="allSectors" value="allSectors" class="govuk-checkboxes__input govuk-checkboxes__input--small" id="allSectors" type="checkbox" {{ filters.sectors is defined and filters.sectors is empty  ? 'checked' }}>
                                                <label class="govuk-label govuk-checkboxes__label" for="allSectors">
                                                    View all
                                                </label>
                                            </div>

                                            {% for item in sectors|sort %}
                                                <div class="govuk-checkboxes__item govuk-checkboxes__item--small">
                                                    <input v-model="checkedSectors" :value="{{ item.id }}" name="sector[]" value={{item.id}} class="govuk-checkboxes__input govuk-checkboxes__input--small" id="{{item.id}}+{{item.slug}}" type="checkbox" {{ item.id in sectorsForTwig ? 'checked' }}>
                                                    <label class="govuk-label govuk-checkboxes__label" for="{{item.id}}+{{item.slug}}">
                                                        {{ item.name }}
                                                    </label>
                                                </div>
                                            {% endfor %}

                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        {% endif %}

                        <button class="govuk-button" data-module="govuk-button" v-show="!javascriptVersion"> Filter </button>
                    </form>
                </div>
                
                <div class="govuk-grid-column-three-quarters events-list-container">

                    <div v-if="responseAvailable" class="hideWithoutJS govuk-visually-hidden">

                        <h2 class="govuk-heading-m ccs-font-weight-semibold govuk-!-font-size-24" aria-live="assertive">
                            <span v-if="searchResultsNumber == 1" v-show="javascriptVersion" style="display: none;"> {[ searchResultsNumber ]} event found</span>
                            <span v-else                          v-show="javascriptVersion" style="display: none;"> {[ searchResultsNumber ]} events found</span>

                            <span v-if="!javascriptVersion">{{ pagination.totalResults }} event{{pagination.totalResults != 1 ? 's'}} found</span>
                        </h2>

                        <ol class="events-list">
                            <li class="event-list__item" v-show="javascriptVersion" v-for="result in results">
                                <picture>
                                    <a v-if=result.imageSet class="event-list__image" aria-hidden="true">
                                        <img :src="result.imageURL"
                                                :alt="result.altText"
                                                role="presentation"
                                                class=""
                                                loading="lazy"/>
                                    </a>
                                </picture>
                                
                                <div class="event-list__details">
                                    <h3 class="event-list__title govuk-!-margin-bottom-2 ">
                                        <a :href="result.eventURL" v-html="result.title.rendered"></a>
                                    </h3>

                                    <ul class="event-list__meta list--inline govuk-body-s govuk-!-margin-bottom-2">
                                        <li  v-if="result.startDate == result.endDate"><strong>Date:</strong> {[result.startDate]} </li>
                                        <template v-else>
                                            <li><strong>Start Date:</strong> {[result.startDate]} </li>
                                            <li><strong>End Date:</strong> {[result.endDate]} </li>
                                        </template>
                                        <li><strong>Type:</strong> {[result.event_type]}</li>
                                    </ul>
                                    <p class="govuk-body-s govuk-!-margin-0"> {[result.summary]} </p>
                                </div>
                            </li>
                        </ol>

                        <results-pagination 
                            :total-results="totalResults" 
                            :number-of-pages="numberOfPages" 
                            :current-page="currentPage" 
                            v-on:update-page="updatePageValue($event)" 
                        ></results-pagination>


                </div>
                <div v-else-if="responseAvailable === false">
                    <p>Loading results ...</p>
                </div>
                <div v-if="emptyResult" class="hideWithoutJS govuk-visually-hidden">
                    <p>There are no matching results.</p>
                </div>

                {# <div v-show="!javascriptVersion">
                    {% include '/events/_resultWithoutJS.html.twig' %}
                </div> #}

                </div>
            </div>

        </main>

        {% if app.environment == "prod" %}
            <script src="/assets/scripts/libraries/vue.min.js?v=1"></script>
        {% else %}
            <script src="/assets/scripts/libraries/vue.js?v=1"></script>
        {% endif %}

        <script>
            pushToDataLayer({'event': 'page_view', 'page_referrer': window.location.href, 'page_type': 'event'});
            
            /**
            * Function to test if the browser supports ES6 template literals
            */
            function supportsLiterals() {
                try{
                    return eval("''===``");
                }
                catch(e){
                    return false;
                }
            }

            if(!('Promise' in window) || !supportsLiterals() || !window.fetch) {
                throw new Error("Your browser doesn't support the necessary JavaScript functions to use the enhanced search and has been served a non-JavaScript version");
            }

            var apiBaseUrl                  = '{{ api_base_url }}';
            var appBaseUrl                  = '{{ app_base_url }}';
            var totalResults                = {{ pagination.totalResults }};
            var pageNumber                  = {% if pageNumber is defined and pageNumber is not empty %}{{ pageNumber }}{% else %}1{% endif %};
            var checkedEventType            = [];
            var checkedEventAudience        = [];
            var checkedProductsServices     = [];
            var checkedSectors              = [];

            {% if filters.event_type is defined and filters.event_type is not empty %}
                var checkedEventType   = Array.from([{{filters.event_type}}]);
            {% endif %}

            {% if filters.audience_tag is defined and filters.audience_tag is not empty %}
                var checkedEventAudience   = Array.from([{{filters.audience_tag}}]);
            {% endif %}

            {% if filters.products_services is defined and filters.products_services is not empty %}
                var checkedProductsServices   = Array.from([{{filters.products_services}}]);
            {% endif %}
            
            {% if filters.sectors is defined and filters.sectors is not empty %}
                var checkedSectors   = Array.from([{{filters.sectors}}]);
            {% endif %}

            const app = Vue.createApp({
                delimiters: ['{[', ']}'],
                
                data() {
                    return {
                        javascriptVersion: true,
                        results: null,
                        responseAvailable: false,
                        emptyResult: false,
                        apiURL: apiBaseUrl + "events?",
                        checkedEventAudience: checkedEventAudience,
                        checkedEventType: checkedEventType,
                        checkedProductsServices: checkedProductsServices,
                        checkedSectors: checkedSectors,
                        currentPage: pageNumber,
                        numberOfPages: Number,
                        totalResults: Number,
                        searchResultsNumber: totalResults,
                        popstateLoad: false,
                    }
                },
                mounted() {
                    this.fetchAPIData(this.currentPage);
                    this.setupHistoryApi();     
                },
                watch: {
                    responseAvailable(responseAvailable) {
                        this.$nextTick(() => {
                            const hideWithOutJS = document.querySelectorAll('.hideWithoutJS');
                            hideWithOutJS.forEach(section => {
                                if (section.classList.contains('govuk-visually-hidden')) {;
                                    section.classList.remove('govuk-visually-hidden');
                                }
                            });
                        });
                    },
                    checkedEventType: function(checkedEventType) {
                        if (checkedEventType.length === Number("{{event_type|length}}")) {
                            this.checkedEventType = [];
                        }
                        this.fetchAPIData(null)
                    },
                    checkedEventAudience: function(checkedEventAudience) {
                        if (checkedEventAudience.length === Number("{{audience_tag|length}}")) {
                            this.checkedEventAudience = [];
                        }
                        this.fetchAPIData(null)
                    },
                    checkedProductsServices: function(checkedProductsServices) {
                        if (checkedProductsServices.length === Number("{{products_services|length}}")) {
                            this.checkedProductsServices = [];
                        }
                        this.fetchAPIData(null)
                    },
                    checkedSectors: function(checkedSectors) {
                        if (checkedSectors.length === Number("{{sectors|length}}")) {
                            this.checkedSectors = [];
                        }
                        this.fetchAPIData(null)
                    },
                },
                computed: {
                    frontendSearchUrl: function() {
                        var queryUrl = '/events/?'
                            + ((this.checkedEventAudience || []).length !== 0       ? '&audience_tag=' + this.checkedEventAudience.join() : '')
                            + ((this.checkedEventType || []).length !== 0           ? '&event_type=' + this.checkedEventType.join() : '')
                            + ((this.checkedProductsServices || []).length !== 0    ? '&products_services=' + this.checkedProductsServices.join() : '')
                            + ((this.checkedSectors || []).length !== 0             ? '&sectors=' + this.checkedSectors.join() : '')
                            + (this.currentPage ? '&page=' + this.currentPage : '');

                        return queryUrl == '/events/?' ? '' : queryUrl;
                    },
                    allTypeModel: {
                        get() {
                            return (this.checkedEventType || []).length === 0;
                        },
                        set(checked) {
                            if (checked) {
                                this.checkedEventType = [];
                            }else{
                                document.getElementById("allType").checked = true
                            }
                        }
                    },
                    allAudienceModel: {
                        get() {
                            return (this.checkedEventAudience || []).length === 0;
                        },
                        set(checked) {
                            if (checked) {
                                this.checkedEventAudience = [];
                            }else{
                                document.getElementById("allAudience").checked = true
                            }
                        }
                    },
                    allPSModel: {
                        get() {
                            return (this.checkedProductsServices || []).length === 0;
                        },
                        set(checked) {
                            if (checked) {
                                this.checkedProductsServices = [];
                            } else {
                                document.getElementById("allPS").checked = true
                            }
                        }
                    },
                    allSectorsModel: {
                        get() {
                            return (this.checkedSectors || []).length === 0;
                        },
                        set(checked) {
                            if (checked) {
                                this.checkedSectors = [];
                            } else {
                                document.getElementById("allSectors").checked = true
                            }
                        }
                    },
                },
                methods: {
                    resetAll:function(){
                        this.checkedEventAudience = [];
                        this.checkedEventType = [];
                        this.checkedProductsServices = [];
                        this.checkedSectors = [];
                        this.currentPage = 1;
                    },
                    formatDate:function(dateString){
                        var date = new Date();
                        date.setDate(dateString.split('-')[0])
                        date.setMonth(dateString.split('-')[1]-1)
                        date.setFullYear(dateString.split('-')[2])

                        const month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][date.getMonth()];
                        return date.getDate() + ' ' + month + ' ' + date.getFullYear();
                    },
                    searchRequestUrl: function() {
                        var fetchURL =    this.apiURL 
                                    + (this.checkedEventType.length !== 0 ? '&event_type=' + this.checkedEventType.join() : '')
                                    + (this.checkedEventAudience.length !== 0 ? '&audience_tag=' + this.checkedEventAudience.join() : '')
                                    + (this.checkedProductsServices.length !== 0 ? '&products_services=' + this.checkedProductsServices.join() : '')
                                    + (this.checkedSectors.length !== 0 ? '&sectors=' + this.checkedSectors.join() : '');

                        fetchURL = fetchURL + "&orderby=start_datetime&order=asc&per_page=10&page=" + this.currentPage;

                        if(this.popstateLoad === false) {
                            history.pushState({
                                checkedEventAudience:       [...this.checkedEventAudience],
                                checkedEventType:           [...this.checkedEventType],
                                checkedProductsServices:    [...this.checkedProductsServices],
                                checkedSectors:             [...this.checkedSectors],
                            }, 'Events', this.frontendSearchUrl);
                        }

                        this.popstateLoad = false;

                        return fetchURL;
                    },
                    fetchAPIData: function(pageNumber) {
                        this.responseAvailable = false;
                        this.emptyResult = false;
                        this.currentPage = pageNumber != null ?  pageNumber : 1;

                        var requestUrl = this.searchRequestUrl();
                        console.log(requestUrl);
                        
                        fetch(requestUrl)
                        .then(async function(response) {
                            if (!response.ok) {
                                throw new Error('HTTP error, status = ' + response.status);
                            }
                            return response.json();
                        })
                        .then((jsonResponse) => {
                            this.numberOfPages = jsonResponse.meta['X-WP-TotalPages'];
                            this.totalResults = jsonResponse.meta['X-WP-Total'];
                            this.results = jsonResponse.body;
                            this.searchResultsNumber = this.totalResults;
                            for(var i = 0; i < this.results.length; i++) {  
                                this.results[i].eventURL = appBaseUrl + "/events/" + this.results[i].id + "/" + this.results[i].slug;
                                this.results[i].startDate = this.formatDate(jsonResponse.body[i].acf.start_datetime.split(' ')[0]);
                                this.results[i].endDate = this.formatDate(jsonResponse.body[i].acf.end_datetime.split(' ')[0]);
                                this.results[i].event_type = this.results[i].acf.event_type;
                                this.results[i].summary = this.results[i].acf.event_summary;

                                this.results[i].imageSet = false;
                                if (this.results[i].acf.featured_image_url != false) {
                                    this.results[i].imageSet = true;
                                    this.results[i].imageURL = this.results[i].acf.featured_image_url;
                                    this.results[i].altText  = this.results[i].acf.alt_text;
                                }
                            }

                            if( Object.keys(jsonResponse.body).length === 0 ){
                                this.emptyResult = true;
                                this.responseAvailable = null;
                            }else{
                                this.responseAvailable = true;
                            }
                        })
                        .catch((error) => {
                            console.log('An error occurred while fetching the API data');
                            console.log(error);
                            this.responseAvailable = false;
                        });
                    },
                    updatePageValue: function(newPageValue) {
                        this.currentPage = newPageValue;
                        this.fetchAPIData(newPageValue);
                    },
                    setupHistoryApi: function() {
                        window.onpopstate = (event) => {
                            this.popstateLoad = true;

                            if(event.state == null) {
                                this.checkedEventAudience       = [];
                                this.checkedEventType           = [];
                                this.checkedProductsServices    = [];
                                this.checkedSectors             = [];
                                return;
                            }

                            this.checkedEventAudience       = event.state.checkedEventAudience;
                            this.checkedEventType           = event.state.checkedEventType;
                            this.checkedProductsServices    = event.state.checkedProductsServices;
                            this.checkedSectors             = event.state.checkedSectors;
                        }
                    }
                }
            })

            app.component('results-pagination', {
                delimiters: ['{[', ']}'],
                props: {
                    currentPage: Number,
                    totalResults: Number,
                    numberOfPages: Number,
                },
                computed: {
                    nextPage() {
                        return this.currentPage == this.numberOfPages ? this.currentPage : this.currentPage + 1;
                    },
                    previousPage() {
                        return this.currentPage == 1 ? this.currentPage : this.currentPage - 1;
                    },
                    paginationStartNumber() {
                        var linksStartPage = 1;
                        if ((this.currentPage - 2) < 2 ) {
                            linksStartPage = 2;
                        } else {
                            linksStartPage = this.currentPage - 2;
                        }

                        if((this.currentPage + 2) > this.numberOfPages) {
                            linksStartPage = linksStartPage - 2;
                        }

                        if(linksStartPage <= 1 ) {
                            linksStartPage = 2;
                        }
                        return linksStartPage;
                    },
                    paginationEndNumber() {
                        var linksEndPage = this.paginationStartNumber + 4;
                        
                        if ((linksEndPage >= this.numberOfPages)) {
                            linksEndPage = this.numberOfPages - 1;
                        }
                        
                        if(this.numberOfPages == 1) {
                            linksEndPage = 1;
                        }

                        return linksEndPage;
                    }
                },
                methods: {
                    updatePageNumber(event, newPage) {
                        event.preventDefault();
                        this.$emit('update-page', newPage);
                    },
                    range(start, end) {
                        return Array(end - start + 1).fill().map((_, idx) => start + idx);
                    }
                },
                template: `
                    <div class="events-pagination">
                    <ul class="list--inline pagination govuk-body" role="list" aria-label="Pagination" v-if="numberOfPages > 0">
                        <li class="pagination__item pagination__item--previous" v-if="currentPage != 1">
                        <a href="#" rel="previous" v-on:click="updatePageNumber($event, previousPage)">
                            <span class="icon">
                            <svg width="17" height="14" xmlns="http://www.w3.org/2000/svg"><path d="M6.7 0l1.4 1.4-4.3 4.3h13v2H3.9l4.2 4-1.4 1.4L0 6.7z" fill="#007194" fill-rule="evenodd"></path></svg>
                            </span>
                            <span>Previous</span> <span class="visuallyhidden">page</span>
                        </a>
                        </li>
                        <li class="pagination__item">
                        <span v-if="currentPage == 1"><span class="visuallyhidden">Page </span>1</span>
                        <a v-else href="#" v-on:click="updatePageNumber($event, 1)"><span class="visuallyhidden">Page </span>1</a>
                        </li>
                        <li class="pagination__item" v-if="paginationStartNumber > 2">…</li>
                        <li class="pagination__item" v-for="page in range(paginationStartNumber, paginationEndNumber)" v-if="numberOfPages > 1">
                        <span v-if="page == currentPage"><span class="visuallyhidden">Page </span>{[ page ]}</span>
                        <a v-else href="#" v-on:click="updatePageNumber($event, page)"><span class="visuallyhidden">Page </span>{[ page ]}</a>
                        </li>
                        <li class="pagination__item" v-if="(paginationEndNumber + 1) < numberOfPages">…</li>
                        <li class="pagination__item" v-if="numberOfPages > 1">
                        <span v-if="currentPage == numberOfPages"><span class="visuallyhidden">Page </span>{[ numberOfPages ]}</span>
                        <a v-else href="#" v-on:click="updatePageNumber($event, numberOfPages)"><span class="visuallyhidden">Page </span>{[ numberOfPages ]}</a>
                        </li>
                        <li class="pagination__item pagination__item--next" v-if="currentPage != numberOfPages">
                        <a href="#" rel="next" v-on:click="updatePageNumber($event, nextPage)">
                            <span>Next</span> <span class="visuallyhidden">page</span>
                            <span class="icon">
                            <svg width="17" height="14" xmlns="http://www.w3.org/2000/svg"><path d="M10.1 0L8.7 1.4 13 5.7H0v2h12.9l-4.2 4 1.4 1.4 6.7-6.4z" fill="#007194" fill-rule="evenodd"></path></svg>
                            </span>
                        </a>
                        </li>
                    </ul>
                    </div>
                `
            });

            app.mount('#main-content');
            
        </script>
    </div>
{% endblock %}